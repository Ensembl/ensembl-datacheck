{
   "Archive" : {
      "datacheck_type" : "critical",
      "description" : "Gene archive table is up to date.",
      "groups" : [
         "core_handover",
         "post_projection",
         "stable_id_mapping"
      ],
      "name" : "Archive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Archive"
   },
   "ArraysHaveProbes" : {
      "datacheck_type" : "critical",
      "description" : "All arrays are associated with probes.",
      "groups" : [
         "funcgen_release",
         "probe_mapping"
      ],
      "name" : "ArraysHaveProbes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ArraysHaveProbes"
   },
   "AssemblyAccession" : {
      "datacheck_type" : "critical",
      "description" : "Meta key \"assembly.accession\" is set.",
      "groups" : [
         "assembly",
         "core_handover"
      ],
      "name" : "AssemblyAccession",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyAccession"
   },
   "AssemblyConsistent" : {
      "datacheck_type" : "critical",
      "description" : "Assembly is the same in core and core-like databases",
      "groups" : [
         "assembly",
         "core_handover"
      ],
      "name" : "AssemblyConsistent",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyConsistent"
   },
   "AssemblyExceptions" : {
      "datacheck_type" : "critical",
      "description" : "Check if assembly_exceptions are present and correct.",
      "groups" : [
         "assembly",
         "handover"
      ],
      "name" : "AssemblyExceptions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyExceptions"
   },
   "AssemblyMapping" : {
      "datacheck_type" : "critical",
      "description" : "Check validity of assembly mappings.",
      "groups" : [
         "assembly",
         "handover"
      ],
      "name" : "AssemblyMapping",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyMapping"
   },
   "AssemblySeqregion" : {
      "datacheck_type" : "critical",
      "description" : "assembly and seq_region table are consistent.",
      "groups" : [
         "assembly",
         "core_handover"
      ],
      "name" : "AssemblySeqregion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblySeqregion"
   },
   "AttribValues" : {
      "datacheck_type" : "advisory",
      "description" : "TSL, APPRIS, GENCODE and RefSeq attributes exist",
      "groups" : [
         "core_handover"
      ],
      "name" : "AttribValues",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AttribValues"
   },
   "CompareBiotype" : {
      "datacheck_type" : "critical",
      "description" : "Check for more than 25% difference between the number of genes in two databases, broken down by biotype.",
      "groups" : [
         "handover"
      ],
      "name" : "CompareBiotype",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareBiotype"
   },
   "ControlledTablesCore" : {
      "datacheck_type" : "critical",
      "description" : "Check that controlled tables are consistent with production database",
      "groups" : [
         "production_db"
      ],
      "name" : "ControlledTablesCore",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesCore"
   },
   "ControlledTablesVariation" : {
      "datacheck_type" : "critical",
      "description" : "Check that controlled tables are consistent with production database",
      "groups" : [
         "production_db"
      ],
      "name" : "ControlledTablesVariation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesVariation"
   },
   "CoreForeignKeys" : {
      "datacheck_type" : "critical",
      "description" : "Check for incorrect foreign key relationships that are not defined by a \"foreign_keys.sql\" file..",
      "groups" : [
         "handover"
      ],
      "name" : "CoreForeignKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CoreForeignKeys"
   },
   "CurrentRegulatoryBuildHasEpigenomes" : {
      "datacheck_type" : "critical",
      "description" : "Check if the current regulatory build has epigenomes data",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "CurrentRegulatoryBuildHasEpigenomes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CurrentRegulatoryBuildHasEpigenomes"
   },
   "EpigenomeHasSegmentationFile" : {
      "datacheck_type" : "critical",
      "description" : "Check that every epigenome which is part of the current Regulatory Build has a segmentation file in the segmentation_file table",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "EpigenomeHasSegmentationFile",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::EpigenomeHasSegmentationFile"
   },
   "ExperimentHasFeatureSet" : {
      "datacheck_type" : "critical",
      "description" : "Check that every distinct experiment, epigenome and feature_type combination is linked to a feature_set",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "ExperimentHasFeatureSet",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExperimentHasFeatureSet"
   },
   "ForeignKeys" : {
      "datacheck_type" : "critical",
      "description" : "Check for incorrect foreign key relationships, as defined by a \"foreign_keys.sql\" file.",
      "groups" : [],
      "name" : "ForeignKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeys"
   },
   "GeneBiotypes" : {
      "datacheck_type" : "critical",
      "description" : "Check that genes and transcripts have valid biotypes",
      "groups" : [
         "gene"
      ],
      "name" : "GeneBiotypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBiotypes"
   },
   "GeneBounds" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that genes are within the bounds of their seq_region",
      "groups" : [
         "core_handover"
      ],
      "name" : "GeneBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBounds"
   },
   "GeneCounts" : {
      "datacheck_type" : "critical",
      "description" : "Check that gene counts are correct",
      "groups" : [
         "genes"
      ],
      "name" : "GeneCounts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneCounts"
   },
   "GeneGC" : {
      "datacheck_type" : "critical",
      "description" : "Check that every gene has a GC statistic",
      "groups" : [
         "genes"
      ],
      "name" : "GeneGC",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneGC"
   },
   "GenomeStatistics" : {
      "datacheck_type" : "critical",
      "description" : "Check that genome statistics are present and correct",
      "groups" : [
         "genes"
      ],
      "name" : "GenomeStatistics",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GenomeStatistics"
   },
   "LRG" : {
      "datacheck_type" : "critical",
      "description" : "Check that LRG features and seq_regions are correctly associated.",
      "groups" : [
         "handover"
      ],
      "name" : "LRG",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::LRG"
   },
   "MetaKeyCardinality" : {
      "datacheck_type" : "critical",
      "description" : "Check cardinality of meta data that must be single-valued",
      "groups" : [
         "core_handover"
      ],
      "name" : "MetaKeyCardinality",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyCardinality"
   },
   "MySQLStorageEngine" : {
      "datacheck_type" : "critical",
      "description" : "Check if database schema does not match the given MySQL storage engine",
      "groups" : [],
      "name" : "MySQLStorageEngine",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MySQLStorageEngine"
   },
   "PepstatsAttributes" : {
      "datacheck_type" : "critical",
      "description" : "Check that every translation has pepstats statistics",
      "groups" : [
         "genes"
      ],
      "name" : "PepstatsAttributes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PepstatsAttributes"
   },
   "PhenotypeDescription" : {
      "datacheck_type" : "critical",
      "description" : "Check that imported description contains only supported characters",
      "groups" : [],
      "name" : "PhenotypeDescription",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeDescription"
   },
   "RegulatoryFeatureIsActive" : {
      "datacheck_type" : "critical",
      "description" : "Check that every regulatory feature has a valid activity value in at least one epigenome.",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "RegulatoryFeatureIsActive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RegulatoryFeatureIsActive"
   },
   "SampleRegulatoryFeatureExists" : {
      "datacheck_type" : "critical",
      "description" : "Check if the current regulatory build has a sample regulatory feature",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "SampleRegulatoryFeatureExists",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SampleRegulatoryFeatureExists"
   },
   "SchemaVersion" : {
      "datacheck_type" : "critical",
      "description" : "Check that the schema version meta_key matches the DB name",
      "groups" : [
         "core_handover"
      ],
      "name" : "SchemaVersion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaVersion"
   },
   "SequenceLevel" : {
      "datacheck_type" : "critical",
      "description" : "Check that DNA is attached and only attached to sequence-level seq_regions.",
      "groups" : [
         "handover"
      ],
      "name" : "SequenceLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SequenceLevel"
   },
   "XrefTypes" : {
      "datacheck_type" : "advisory",
      "description" : "Check that xrefs are only attached to one feature type.",
      "groups" : [
         "handover"
      ],
      "name" : "XrefTypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::XrefTypes"
   }
}
