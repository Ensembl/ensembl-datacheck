{
   "APPRISAttribValuesExist" : {
      "datacheck_type" : "critical",
      "description" : "Check that APPRIS attributes exist",
      "groups" : [
         "geneset_support_level"
      ],
      "name" : "APPRISAttribValuesExist",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::APPRISAttribValuesExist"
   },
   "APPRISCoverage" : {
      "datacheck_type" : "advisory",
      "description" : "APPRIS covers 95% of protein-coding gene on each chromosome",
      "groups" : [
         "geneset_support_level"
      ],
      "name" : "APPRISCoverage",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::APPRISCoverage"
   },
   "AlignFeatureExternalDB" : {
      "datacheck_type" : "advisory",
      "description" : "All alignment features are linked to an external DB",
      "groups" : [
         "annotation",
         "core",
         "brc4_core",
         "corelike"
      ],
      "name" : "AlignFeatureExternalDB",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AlignFeatureExternalDB"
   },
   "AlignmentCoordinates" : {
      "datacheck_type" : "critical",
      "description" : "Alignment coordinates are within the length of their dnafrag",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "AlignmentCoordinates",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AlignmentCoordinates"
   },
   "AlignmentReadFileOrphans" : {
      "datacheck_type" : "critical",
      "description" : "Check that all read files are used in an alignment",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_alignments"
      ],
      "name" : "AlignmentReadFileOrphans",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AlignmentReadFileOrphans"
   },
   "AltAllele" : {
      "datacheck_type" : "critical",
      "description" : "Alt allele group members map back to the same chromosome",
      "groups" : [
         "core",
         "brc4_core",
         "geneset"
      ],
      "name" : "AltAllele",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AltAllele"
   },
   "AltAlleleGroup" : {
      "datacheck_type" : "critical",
      "description" : "No alt_allele_group has more than one gene from the primary assembly",
      "groups" : [
         "core",
         "brc4_core",
         "geneset"
      ],
      "name" : "AltAlleleGroup",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AltAlleleGroup"
   },
   "AnalysisDescription" : {
      "datacheck_type" : "critical",
      "description" : "Gene analyses have descriptions",
      "groups" : [
         "analysis_description",
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "AnalysisDescription",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AnalysisDescription"
   },
   "AnalysisFormat" : {
      "datacheck_type" : "critical",
      "description" : "Analysis logic name and date are formatted correctly",
      "groups" : [
         "ancestral",
         "brc4_core",
         "core",
         "corelike"
      ],
      "name" : "AnalysisFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AnalysisFormat"
   },
   "AnalysisWebDataFormat" : {
      "datacheck_type" : "critical",
      "description" : "Checks if entries in the web_data column of the analysis_description table have the correct format",
      "groups" : [
         "funcgen"
      ],
      "name" : "AnalysisWebDataFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AnalysisWebDataFormat"
   },
   "Archive" : {
      "datacheck_type" : "critical",
      "description" : "Gene archive table is up to date",
      "groups" : [
         "id_mapping"
      ],
      "name" : "Archive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Archive"
   },
   "ArraysHaveProbes" : {
      "datacheck_type" : "critical",
      "description" : "All arrays are associated with probes",
      "groups" : [
         "funcgen",
         "probe_mapping"
      ],
      "name" : "ArraysHaveProbes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ArraysHaveProbes"
   },
   "AssemblyExceptions" : {
      "datacheck_type" : "critical",
      "description" : "Assembly exceptions are correctly configured",
      "groups" : [
         "ancestral",
         "assembly",
         "brc4_core",
         "core"
      ],
      "name" : "AssemblyExceptions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyExceptions"
   },
   "AssemblyExceptionsMapping" : {
      "datacheck_type" : "advisory",
      "description" : "Assembly exceptions have alignment mappings",
      "groups" : [
         "assembly",
         "core",
         "brc4_core"
      ],
      "name" : "AssemblyExceptionsMapping",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyExceptionsMapping"
   },
   "AssemblySeqregion" : {
      "datacheck_type" : "critical",
      "description" : "Assembly and seq_region tables are consistent",
      "groups" : [
         "ancestral",
         "assembly",
         "brc4_core",
         "core"
      ],
      "name" : "AssemblySeqregion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblySeqregion"
   },
   "BlankEnums" : {
      "datacheck_type" : "critical",
      "description" : "Enum columns do not have empty string values",
      "groups" : [
         "ancestral",
         "brc4_core",
         "compara",
         "compara_blastocyst",
         "compara_gene_trees",
         "compara_master",
         "compara_syntenies",
         "compara_references",
         "compara_homology_annotation",
         "compara_gene_tree_pipelines",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "BlankEnums",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::BlankEnums"
   },
   "BlankNulls" : {
      "datacheck_type" : "critical",
      "description" : "Nullable columns do not have empty string values",
      "groups" : [
         "ancestral",
         "brc4_core",
         "compara",
         "compara_blastocyst",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "compara_references",
         "compara_homology_annotation",
         "compara_gene_tree_pipelines",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "BlankNulls",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::BlankNulls"
   },
   "BlankSets" : {
      "datacheck_type" : "critical",
      "description" : "Set columns do not have empty string values (unless default)",
      "groups" : [
         "core",
         "corelike",
         "variation"
      ],
      "name" : "BlankSets",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::BlankSets"
   },
   "CanonicalTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Canonical transcripts and translation are correctly configured",
      "groups" : [
         "core",
         "brc4_core",
         "geneset"
      ],
      "name" : "CanonicalTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CanonicalTranscripts"
   },
   "CheckAlphafoldEntries" : {
      "datacheck_type" : "critical",
      "description" : "check alphafold format",
      "groups" : [
         "protein_feature"
      ],
      "name" : "CheckAlphafoldEntries",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckAlphafoldEntries"
   },
   "CheckCAFETable" : {
      "datacheck_type" : "critical",
      "description" : "Each row should show a one-to-many relationship",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckCAFETable",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckCAFETable"
   },
   "CheckComparaStableIDs" : {
      "datacheck_type" : "critical",
      "description" : "gene trees in gene_tree_root and family all have stable_ids generated",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckComparaStableIDs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckComparaStableIDs"
   },
   "CheckConservationScore" : {
      "datacheck_type" : "critical",
      "description" : "The MLSS for GERP_CONSERVATION_SCORE should have conservation score entries",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckConservationScore",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckConservationScore"
   },
   "CheckConservationScorePerBlock" : {
      "datacheck_type" : "critical",
      "description" : "Multiple alignments with >3 species and >3 sequences must have a conservation score",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckConservationScorePerBlock",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckConservationScorePerBlock"
   },
   "CheckConstrainedElementTable" : {
      "datacheck_type" : "critical",
      "description" : "Each row should show a one-to-many relationship",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckConstrainedElementTable",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckConstrainedElementTable"
   },
   "CheckDuplicatedTaxaNames" : {
      "datacheck_type" : "critical",
      "description" : "Check that the ncbi_taxa_name contains only unique rows",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "compara_references",
         "compara_homology_annotation",
         "compara_blastocyst"
      ],
      "name" : "CheckDuplicatedTaxaNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckDuplicatedTaxaNames"
   },
   "CheckEmptyLeavesTrees" : {
      "datacheck_type" : "critical",
      "description" : "Check that none of the gene tree leaves have children",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckEmptyLeavesTrees",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckEmptyLeavesTrees"
   },
   "CheckFamiliesMLSS" : {
      "datacheck_type" : "critical",
      "description" : "The expected number of families MLSSs are present",
      "groups" : [
         "compara",
         "compara_gene_trees"
      ],
      "name" : "CheckFamiliesMLSS",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckFamiliesMLSS"
   },
   "CheckFlatProteinTrees" : {
      "datacheck_type" : "critical",
      "description" : "Check protein tree integrity ensuring number of leaves with parent node at root < 3",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckFlatProteinTrees",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckFlatProteinTrees"
   },
   "CheckGOCScoreStats" : {
      "datacheck_type" : "advisory",
      "description" : "The number of rows for GOC have not dropped from previous release",
      "groups" : [
         "compara",
         "compara_gene_trees"
      ],
      "name" : "CheckGOCScoreStats",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckGOCScoreStats"
   },
   "CheckGeneGainLossData" : {
      "datacheck_type" : "critical",
      "description" : "ncRNA and protein trees must have gene Gain/Loss trees",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckGeneGainLossData",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckGeneGainLossData"
   },
   "CheckGeneTreeRootMLSS" : {
      "datacheck_type" : "critical",
      "description" : "The expected number of gene_tree_root MLSSs are present",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckGeneTreeRootMLSS",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckGeneTreeRootMLSS"
   },
   "CheckGenomicAlignGenomeDBs" : {
      "datacheck_type" : "critical",
      "description" : "Check all genome_dbs for each method_link_species_set is present in genomic_aligns",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckGenomicAlignGenomeDBs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckGenomicAlignGenomeDBs"
   },
   "CheckGenomicAlignMTs" : {
      "datacheck_type" : "advisory",
      "description" : "The multiple alignments should include all the MT sequences",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckGenomicAlignMTs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckGenomicAlignMTs"
   },
   "CheckGenomicAlignTreeTable" : {
      "datacheck_type" : "critical",
      "description" : "Check the consistency and validity of genomic_align_tree",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckGenomicAlignTreeTable",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckGenomicAlignTreeTable"
   },
   "CheckGenomicAlignments" : {
      "datacheck_type" : "critical",
      "description" : "The expected number of genomic alignments have been merged",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckGenomicAlignments",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckGenomicAlignments"
   },
   "CheckHomology" : {
      "datacheck_type" : "critical",
      "description" : "Check homology_id are all one-to-many for homology_members",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_homology_annotation",
         "compara_blastocyst",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckHomology",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckHomology"
   },
   "CheckHomologyMLSS" : {
      "datacheck_type" : "critical",
      "description" : "The expected number of homologys MLSSs are present",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_homology_annotation",
         "compara_blastocyst",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckHomologyMLSS",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckHomologyMLSS"
   },
   "CheckIDRangeMLSS" : {
      "datacheck_type" : "advisory",
      "description" : "All relevant IDs are within the offset range for their MLSS ID",
      "groups" : [
         "compara",
         "compara_pairwise_alignments",
         "compara_genome_alignments"
      ],
      "name" : "CheckIDRangeMLSS",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckIDRangeMLSS"
   },
   "CheckJSONObjects" : {
      "datacheck_type" : "critical",
      "description" : "Check that all JSON objects in gene_tree_object_store are valid",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckJSONObjects",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckJSONObjects"
   },
   "CheckLastZCoverage" : {
      "datacheck_type" : "critical",
      "description" : "Coverage for a LastZ MLSS matches the coverage recorded in the  mlss_tag table",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckLastZCoverage",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckLastZCoverage"
   },
   "CheckMLSSIDConsistencyInGenomicAlign" : {
      "datacheck_type" : "critical",
      "description" : "Check that method_link_species_set_id are the same across genomic_align and genomic_align_block",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckMLSSIDConsistencyInGenomicAlign",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckMLSSIDConsistencyInGenomicAlign"
   },
   "CheckMSANames" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that every MSA method has a name in species_set_header",
      "groups" : [
         "compara",
         "compara_master",
         "compara_genome_alignments"
      ],
      "name" : "CheckMSANames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckMSANames"
   },
   "CheckMemberIDRange" : {
      "datacheck_type" : "advisory",
      "description" : "All members are within the offset range for each genome_db",
      "groups" : [
         "compara_references"
      ],
      "name" : "CheckMemberIDRange",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckMemberIDRange"
   },
   "CheckMethodLinkSpeciesSetNames" : {
      "datacheck_type" : "advisory",
      "description" : "Check for consistency of names in method_link_species_set (and species_set_header)",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_master",
         "compara_syntenies"
      ],
      "name" : "CheckMethodLinkSpeciesSetNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckMethodLinkSpeciesSetNames"
   },
   "CheckMultipleAlignCoverage" : {
      "datacheck_type" : "critical",
      "description" : "Coverage for a multiple whole genome alignment MLSS matches the coverage recorded in the  mlss_tag table",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckMultipleAlignCoverage",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckMultipleAlignCoverage"
   },
   "CheckNonMinimisedGATs" : {
      "datacheck_type" : "critical",
      "description" : "Check that all genomic align trees are binary, with the exception of unrooted EPO-extended trees which may have 3 sequences",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "CheckNonMinimisedGATs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckNonMinimisedGATs"
   },
   "CheckOntologyTerm" : {
      "datacheck_type" : "critical",
      "description" : "Check presence of critical terms",
      "groups" : [
         "ontologies"
      ],
      "name" : "CheckOntologyTerm",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckOntologyTerm"
   },
   "CheckOrthologyQCThresholds" : {
      "datacheck_type" : "critical",
      "description" : "Check that some wga_coverage and goc_score thresholds have been populated",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckOrthologyQCThresholds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckOrthologyQCThresholds"
   },
   "CheckPairAlignerUniqueMethod" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that there is only one method for pairwise alignment per species_set",
      "groups" : [
         "compara",
         "compara_master",
         "compara_genome_alignments"
      ],
      "name" : "CheckPairAlignerUniqueMethod",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckPairAlignerUniqueMethod"
   },
   "CheckReleaseConsistency" : {
      "datacheck_type" : "critical",
      "description" : "Check for consistency between retired genomes and species_sets",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_master",
         "compara_syntenies",
         "compara_references"
      ],
      "name" : "CheckReleaseConsistency",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckReleaseConsistency"
   },
   "CheckReleaseNulls" : {
      "datacheck_type" : "critical",
      "description" : "For release DB the last_release must be NULL but cannot have a NULL first_release",
      "groups" : [
         "compara",
         "compara_master",
         "compara_syntenies",
         "compara_references"
      ],
      "name" : "CheckReleaseNulls",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckReleaseNulls"
   },
   "CheckSequenceTable" : {
      "datacheck_type" : "critical",
      "description" : "Check for sequence length and availability",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_references",
         "compara_homology_annotation",
         "compara_blastocyst",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckSequenceTable",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckSequenceTable"
   },
   "CheckSpeciesSetSizeByMethod" : {
      "datacheck_type" : "critical",
      "description" : "Checks that the species-sets have the expected number of genomes",
      "groups" : [
         "compara",
         "compara_master",
         "compara_genome_alignments",
         "compara_gene_trees",
         "compara_syntenies"
      ],
      "name" : "CheckSpeciesSetSizeByMethod",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckSpeciesSetSizeByMethod"
   },
   "CheckSpeciesSetTable" : {
      "datacheck_type" : "critical",
      "description" : "Check species_set_tags have no orphans and species_sets are unique",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "compara_references",
         "compara_homology_annotation",
         "compara_blastocyst"
      ],
      "name" : "CheckSpeciesSetTable",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckSpeciesSetTable"
   },
   "CheckSpeciesTreeNodeAttr" : {
      "datacheck_type" : "critical",
      "description" : "Check some entries in species_tree_node_attr are > 0",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckSpeciesTreeNodeAttr",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckSpeciesTreeNodeAttr"
   },
   "CheckSpeciesTrees" : {
      "datacheck_type" : "critical",
      "description" : "The expected number of species trees have been merged",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CheckSpeciesTrees",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckSpeciesTrees"
   },
   "CheckSynteny" : {
      "datacheck_type" : "critical",
      "description" : "Every synteny_region_id should be seen more than once and correspond to an mlss",
      "groups" : [
         "compara",
         "compara_syntenies"
      ],
      "name" : "CheckSynteny",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckSynteny"
   },
   "CheckSyntenySanity" : {
      "datacheck_type" : "advisory",
      "description" : "Check for missing syntenies in the compara database",
      "groups" : [
         "compara",
         "compara_syntenies"
      ],
      "name" : "CheckSyntenySanity",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckSyntenySanity"
   },
   "CheckTableSizes" : {
      "datacheck_type" : "advisory",
      "description" : "Tables must be populated and not differ significantly in row numbers",
      "groups" : [
         "compara"
      ],
      "name" : "CheckTableSizes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckTableSizes"
   },
   "CheckWGACoverageStats" : {
      "datacheck_type" : "advisory",
      "description" : "The number of rows for WGA coverage have not dropped from previous release",
      "groups" : [
         "compara",
         "compara_gene_trees"
      ],
      "name" : "CheckWGACoverageStats",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckWGACoverageStats"
   },
   "ChromosomesAnnotated" : {
      "datacheck_type" : "critical",
      "description" : "Chromosomal seq_regions have appropriate attribute",
      "groups" : [
         "assembly",
         "core",
         "brc4_core"
      ],
      "name" : "ChromosomesAnnotated",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ChromosomesAnnotated"
   },
   "CigarCheck" : {
      "datacheck_type" : "critical",
      "description" : "The cigar_line must not have negative numbers or zeros in it",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_homology_annotation",
         "compara_blastocyst",
         "compara_gene_tree_pipelines"
      ],
      "name" : "CigarCheck",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CigarCheck"
   },
   "CompareAllele" : {
      "datacheck_type" : "advisory",
      "description" : "Compare allele counts between two databases",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareAllele",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareAllele"
   },
   "CompareBiotypeGroup" : {
      "datacheck_type" : "advisory",
      "description" : "Compare gene counts between two databases, categorised by biotype",
      "groups" : [
         "compare_core"
      ],
      "name" : "CompareBiotypeGroup",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareBiotypeGroup"
   },
   "CompareConsequenceTypes" : {
      "datacheck_type" : "advisory",
      "description" : "Compare transcript_variation counts between two databases, categorised by consequence type",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareConsequenceTypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareConsequenceTypes"
   },
   "CompareGOXref" : {
      "datacheck_type" : "advisory",
      "description" : "Compare GO xref counts between two databases, categorised by source",
      "groups" : [
         "compare_core",
         "xref",
         "xref_go_projection"
      ],
      "name" : "CompareGOXref",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareGOXref"
   },
   "CompareGenotypes" : {
      "datacheck_type" : "advisory",
      "description" : "Compare genotype counts between two databases",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareGenotypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareGenotypes"
   },
   "CompareHGNCMultipleGenes" : {
      "datacheck_type" : "advisory",
      "description" : "HGNC-derived gene names assigned to multiple genes have not increased more than 5%",
      "groups" : [
         "compare_core",
         "xref",
         "xref_name_projection"
      ],
      "name" : "CompareHGNCMultipleGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareHGNCMultipleGenes"
   },
   "CompareMSANames" : {
      "datacheck_type" : "advisory",
      "description" : "The species_sets from the previous database are still present",
      "groups" : [
         "compara"
      ],
      "name" : "CompareMSANames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareMSANames"
   },
   "CompareMetaKeys" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that appropriate meta_keys are updated when the assembly or geneset changes",
      "groups" : [
         "assembly",
         "brc4_core",
         "core",
         "geneset",
         "meta"
      ],
      "name" : "CompareMetaKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareMetaKeys"
   },
   "CompareOntologyTerm" : {
      "datacheck_type" : "advisory",
      "description" : "Compare namespace counts between current and previous ontology database",
      "groups" : [
         "ontologies"
      ],
      "name" : "CompareOntologyTerm",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareOntologyTerm"
   },
   "CompareOntologyTotal" : {
      "datacheck_type" : "critical",
      "description" : "Compare total counts between current and previous ontology database",
      "groups" : [
         "ontologies"
      ],
      "name" : "CompareOntologyTotal",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareOntologyTotal"
   },
   "ComparePhenotypeFeatures" : {
      "datacheck_type" : "advisory",
      "description" : "Compare phenotype feature counts between two databases, categorised by source",
      "groups" : [
         "compare_variation"
      ],
      "name" : "ComparePhenotypeFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ComparePhenotypeFeatures"
   },
   "ComparePreviousVersionGenomicProbeFeaturesByArray" : {
      "datacheck_type" : "advisory",
      "description" : "Checks for loss of probes features from genomic mappings for each array that is not organised into probe sets.",
      "groups" : [
         "probe_mapping"
      ],
      "name" : "ComparePreviousVersionGenomicProbeFeaturesByArray",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ComparePreviousVersionGenomicProbeFeaturesByArray"
   },
   "ComparePreviousVersionGenomicProbeFeaturesByArrayWithProbeSets" : {
      "datacheck_type" : "advisory",
      "description" : "Checks for loss of probes features from genomic mappings for each array that is organised into probe sets.",
      "groups" : [
         "probe_mapping"
      ],
      "name" : "ComparePreviousVersionGenomicProbeFeaturesByArrayWithProbeSets",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ComparePreviousVersionGenomicProbeFeaturesByArrayWithProbeSets"
   },
   "ComparePreviousVersionProbeFeatures" : {
      "datacheck_type" : "advisory",
      "description" : "Checks for loss of probes between database versions",
      "groups" : [
         "probe_mapping"
      ],
      "name" : "ComparePreviousVersionProbeFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ComparePreviousVersionProbeFeatures"
   },
   "ComparePreviousVersionProbeFeaturesByArray" : {
      "datacheck_type" : "advisory",
      "description" : "Checks for loss of probes features for each array.",
      "groups" : [
         "probe_mapping"
      ],
      "name" : "ComparePreviousVersionProbeFeaturesByArray",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ComparePreviousVersionProbeFeaturesByArray"
   },
   "ComparePreviousVersionProbes" : {
      "datacheck_type" : "advisory",
      "description" : "Checks for loss of Probes between database versions",
      "groups" : [
         "probe_mapping"
      ],
      "name" : "ComparePreviousVersionProbes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ComparePreviousVersionProbes"
   },
   "ComparePreviousVersionTranscriptProbeFeaturesByArray" : {
      "datacheck_type" : "advisory",
      "description" : "Checks for loss of probes features from transcript mappings for each array that is not organised into probe sets.",
      "groups" : [
         "probe_mapping"
      ],
      "name" : "ComparePreviousVersionTranscriptProbeFeaturesByArray",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ComparePreviousVersionTranscriptProbeFeaturesByArray"
   },
   "ComparePreviousVersionTranscriptProbeFeaturesByArrayWithProbeSets" : {
      "datacheck_type" : "advisory",
      "description" : "hecks for loss of probes features from transcript mappings for each array that is organised into probe sets.",
      "groups" : [
         "probe_mapping"
      ],
      "name" : "ComparePreviousVersionTranscriptProbeFeaturesByArrayWithProbeSets",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ComparePreviousVersionTranscriptProbeFeaturesByArrayWithProbeSets"
   },
   "CompareProjectedGOXrefs" : {
      "datacheck_type" : "advisory",
      "description" : "Compare GO xref counts between two databases, categorised by source coming from the info_type",
      "groups" : [
         "compare_core",
         "xref",
         "xref_go_projection"
      ],
      "name" : "CompareProjectedGOXrefs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareProjectedGOXrefs"
   },
   "CompareProjectedGeneNames" : {
      "datacheck_type" : "advisory",
      "description" : "Compare Projected Gene Name counts between two databases",
      "groups" : [
         "compare_core",
         "xref",
         "xref_name_projection"
      ],
      "name" : "CompareProjectedGeneNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareProjectedGeneNames"
   },
   "CompareProjectedSynonyms" : {
      "datacheck_type" : "advisory",
      "description" : "Compare Projected Synonyms counts between two databases, categorised by db_name coming from the external_db",
      "groups" : [
         "compare_core",
         "xref",
         "xref_name_projection"
      ],
      "name" : "CompareProjectedSynonyms",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareProjectedSynonyms"
   },
   "CompareProteinFunctionPredictions" : {
      "datacheck_type" : "advisory",
      "description" : "Compare protein function predictions and prediction attributes between two databases, categorised by analysis",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareProteinFunctionPredictions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareProteinFunctionPredictions"
   },
   "CompareReadCoverage" : {
      "datacheck_type" : "advisory",
      "description" : "Compare read coverage by sample between two databases",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareReadCoverage",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareReadCoverage"
   },
   "CompareSampleDisplays" : {
      "datacheck_type" : "advisory",
      "description" : "Compare sample counts between two databases, categorised by display",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareSampleDisplays",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareSampleDisplays"
   },
   "CompareSchema" : {
      "datacheck_type" : "critical",
      "description" : "Compare database schema to definition in SQL file",
      "groups" : [
         "compara",
         "compara_homology_annotation",
         "compara_references",
         "core",
         "brc4_core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "CompareSchema",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareSchema"
   },
   "CompareSource" : {
      "datacheck_type" : "advisory",
      "description" : "Compare source counts between two databases",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareSource",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareSource"
   },
   "CompareStableIdsMapping" : {
      "datacheck_type" : "critical",
      "description" : "Stable IDs have been mapped between old and new databases",
      "groups" : [
         "compare_core"
      ],
      "name" : "CompareStableIdsMapping",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareStableIdsMapping"
   },
   "CompareStructuralVariationStudies" : {
      "datacheck_type" : "advisory",
      "description" : "Compare structural variation counts between two databases, categorised by study",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareStructuralVariationStudies",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareStructuralVariationStudies"
   },
   "CompareSynonym" : {
      "datacheck_type" : "advisory",
      "description" : "Compare synonym counts between two databases, categorised by external_db",
      "groups" : [
         "compare_core",
         "xref",
         "xref_mapping"
      ],
      "name" : "CompareSynonym",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareSynonym"
   },
   "CompareVariationClasses" : {
      "datacheck_type" : "advisory",
      "description" : "Compare variation counts between two databases, categorised by variation class",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareVariationClasses",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareVariationClasses"
   },
   "CompareVariationEvidence" : {
      "datacheck_type" : "advisory",
      "description" : "Compare variation counts between two databases, categorised by evidence",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareVariationEvidence",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareVariationEvidence"
   },
   "CompareVariationFeatures" : {
      "datacheck_type" : "advisory",
      "description" : "Compare variation feature counts between two databases, categorised by seq_region name",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareVariationFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareVariationFeatures"
   },
   "CompareVariationSets" : {
      "datacheck_type" : "advisory",
      "description" : "Compare variation counts between two databases, categorised by variation_set name",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareVariationSets",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareVariationSets"
   },
   "CompareVariationSources" : {
      "datacheck_type" : "advisory",
      "description" : "Compare variation counts between two databases, categorised by source",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareVariationSources",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareVariationSources"
   },
   "CompareVariationSynonyms" : {
      "datacheck_type" : "advisory",
      "description" : "Compare variation synonym counts between two databases, categorised by source",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareVariationSynonyms",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareVariationSynonyms"
   },
   "CompareXref" : {
      "datacheck_type" : "advisory",
      "description" : "Compare xref counts between two databases, categorised by external_db",
      "groups" : [
         "compare_core",
         "xref",
         "xref_mapping"
      ],
      "name" : "CompareXref",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareXref"
   },
   "ControlAlignmentNamingConvention" : {
      "datacheck_type" : "critical",
      "description" : "By convention all controls should have WCE in their name and signals should not.",
      "groups" : [
         "funcgen",
         "funcgen_alignments",
         "regulatory_build"
      ],
      "name" : "ControlAlignmentNamingConvention",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlAlignmentNamingConvention"
   },
   "ControlledAnalysis" : {
      "datacheck_type" : "critical",
      "description" : "Analysis descriptions and display settings are consistent with production database",
      "groups" : [
         "analysis_description",
         "core",
         "brc4_core",
         "corelike"
      ],
      "name" : "ControlledAnalysis",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledAnalysis"
   },
   "ControlledAnalysisVersion" : {
      "datacheck_type" : "advisory",
      "description" : "Analysis db_verion is consistent with production database",
      "groups" : [],
      "name" : "ControlledAnalysisVersion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledAnalysisVersion"
   },
   "ControlledMetaKeys" : {
      "datacheck_type" : "critical",
      "description" : "Meta keys are consistent with production database",
      "groups" : [
         "core",
         "corelike",
         "funcgen",
         "meta",
         "meta_sample",
         "variation"
      ],
      "name" : "ControlledMetaKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledMetaKeys"
   },
   "ControlledTablesCompara" : {
      "datacheck_type" : "critical",
      "description" : "Controlled tables are consistent with compara master database",
      "groups" : [
         "controlled_tables",
         "compara",
         "compara_genome_alignments",
         "compara_gene_trees",
         "compara_syntenies",
         "compara_master"
      ],
      "name" : "ControlledTablesCompara",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesCompara"
   },
   "ControlledTablesCore" : {
      "datacheck_type" : "critical",
      "description" : "Controlled tables are consistent with production database",
      "groups" : [
         "controlled_tables",
         "core",
         "brc4_core",
         "corelike"
      ],
      "name" : "ControlledTablesCore",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesCore"
   },
   "ControlledTablesVariation" : {
      "datacheck_type" : "critical",
      "description" : "Controlled tables are consistent with production database",
      "groups" : [
         "controlled_tables",
         "variation"
      ],
      "name" : "ControlledTablesVariation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesVariation"
   },
   "CoreTables" : {
      "datacheck_type" : "critical",
      "description" : "Requisite core-like tables are identical to those in the core database",
      "groups" : [
         "core_sync",
         "corelike"
      ],
      "name" : "CoreTables",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CoreTables"
   },
   "CurrentRegulatoryBuildHasEpigenomes" : {
      "datacheck_type" : "critical",
      "description" : "Current regulatory build has epigenome data",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "CurrentRegulatoryBuildHasEpigenomes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CurrentRegulatoryBuildHasEpigenomes"
   },
   "DNAEmpty" : {
      "datacheck_type" : "critical",
      "description" : "Core-like databases do not contain DNA sequences",
      "groups" : [
         "corelike"
      ],
      "name" : "DNAEmpty",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DNAEmpty"
   },
   "DNAFragCore" : {
      "datacheck_type" : "critical",
      "description" : "Top-level sequences in the core database match dnafrags in compara database",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "core_sync"
      ],
      "name" : "DNAFragCore",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DNAFragCore"
   },
   "DataFilesExist" : {
      "datacheck_type" : "critical",
      "description" : "Data files are defined where necessary, and exist on the filesystem",
      "groups" : [
         "funcgen"
      ],
      "name" : "DataFilesExist",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DataFilesExist"
   },
   "DatabaseCollation" : {
      "datacheck_type" : "critical",
      "description" : "All tables have the same collation (latin1_swedish_ci)",
      "groups" : [
         "ancestral",
         "brc4_core",
         "compara",
         "compara_blastocyst",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_homology_annotation",
         "compara_master",
         "compara_references",
         "compara_syntenies",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "DatabaseCollation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DatabaseCollation"
   },
   "DatabaseSpeciesName" : {
      "datacheck_type" : "critical",
      "description" : "The species.production_name meta key matches the DB name",
      "groups" : [
         "core",
         "corelike",
         "funcgen",
         "meta",
         "variation"
      ],
      "name" : "DatabaseSpeciesName",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DatabaseSpeciesName"
   },
   "Denormalized" : {
      "datacheck_type" : "critical",
      "description" : "Denormalized columns are synchronised",
      "groups" : [
         "long_running",
         "schema"
      ],
      "name" : "Denormalized",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Denormalized"
   },
   "DensityFeatures" : {
      "datacheck_type" : "critical",
      "description" : "Density statistics are present and correct for chromosomal species",
      "groups" : [
         "core_statistics",
         "statistics"
      ],
      "name" : "DensityFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DensityFeatures"
   },
   "DensitySNPs" : {
      "datacheck_type" : "critical",
      "description" : "Density statistics are present and correct for SNPs",
      "groups" : [
         "statistics",
         "variation_statistics"
      ],
      "name" : "DensitySNPs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DensitySNPs"
   },
   "DisplayNameFormat" : {
      "datacheck_type" : "critical",
      "description" : "For Rapid Release, the display name must be a specific format",
      "groups" : [
         "rapid_release"
      ],
      "name" : "DisplayNameFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DisplayNameFormat"
   },
   "DisplayXrefExists" : {
      "datacheck_type" : "advisory",
      "description" : "At least one gene name exists",
      "groups" : [
         "core",
         "xref",
         "xref_name_projection"
      ],
      "name" : "DisplayXrefExists",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DisplayXrefExists"
   },
   "DisplayXrefFormat" : {
      "datacheck_type" : "critical",
      "description" : "Gene names are correctly formatted",
      "groups" : [
         "core",
         "xref",
         "xref_mapping"
      ],
      "name" : "DisplayXrefFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DisplayXrefFormat"
   },
   "DisplayableGenes" : {
      "datacheck_type" : "advisory",
      "description" : "Genes are displayable and have web_data attached to their analysis",
      "groups" : [
         "analysis_description",
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "DisplayableGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DisplayableGenes"
   },
   "DisplayableSampleGene" : {
      "datacheck_type" : "critical",
      "description" : "Sample gene is displayable and has web_data attached to its analysis",
      "groups" : [
         "analysis_description",
         "core",
         "brc4_core",
         "geneset",
         "meta_sample"
      ],
      "name" : "DisplayableSampleGene",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DisplayableSampleGene"
   },
   "DuplicateComparaMemberXref" : {
      "datacheck_type" : "critical",
      "description" : "Check that the compara member_xref table contains only unique rows",
      "groups" : [
         "compara_annot_highlight"
      ],
      "name" : "DuplicateComparaMemberXref",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DuplicateComparaMemberXref"
   },
   "DuplicateReadNames" : {
      "datacheck_type" : "critical",
      "description" : "Duplicate read names",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "DuplicateReadNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DuplicateReadNames"
   },
   "DuplicateTranscriptNames" : {
      "datacheck_type" : "advisory",
      "description" : "Protein coding Transcript Names are unique",
      "groups" : [
         "xref",
         "xref_mapping"
      ],
      "name" : "DuplicateTranscriptNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DuplicateTranscriptNames"
   },
   "DuplicateXref" : {
      "datacheck_type" : "advisory",
      "description" : "Xrefs have been added twice with different descriptions or versions",
      "groups" : [
         "core",
         "xref",
         "xref_mapping"
      ],
      "name" : "DuplicateXref",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DuplicateXref"
   },
   "EmptyVariationTables" : {
      "datacheck_type" : "advisory",
      "description" : "Variation tables are not empty",
      "groups" : [
         "variation"
      ],
      "name" : "EmptyVariationTables",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::EmptyVariationTables"
   },
   "EpigenomeHasSegmentationFile" : {
      "datacheck_type" : "critical",
      "description" : "All epigenomes in the current regulatory build have a segmentation file",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "EpigenomeHasSegmentationFile",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::EpigenomeHasSegmentationFile"
   },
   "ExonBounds" : {
      "datacheck_type" : "critical",
      "description" : "Exon regions are non-overlapping, and are consistent with their transcripts",
      "groups" : [
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "ExonBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExonBounds"
   },
   "ExonRank" : {
      "datacheck_type" : "critical",
      "description" : "Exon ranks are unique and sequential",
      "groups" : [
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "ExonRank",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExonRank"
   },
   "ExperimentHasFeatureSet" : {
      "datacheck_type" : "critical",
      "description" : "All distinct experiment, epigenome and feature_type combinations are linked to a feature_set",
      "groups" : [
         "funcgen",
         "ersa"
      ],
      "name" : "ExperimentHasFeatureSet",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExperimentHasFeatureSet"
   },
   "FeatureBounds" : {
      "datacheck_type" : "critical",
      "description" : "Feature co-ordinates are within the bounds of their seq_region",
      "groups" : [
         "annotation",
         "core",
         "brc4_core",
         "corelike"
      ],
      "name" : "FeatureBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeatureBounds"
   },
   "FeaturePosition" : {
      "datacheck_type" : "critical",
      "description" : "Feature co-ordinates are within the bounds of their seq_region",
      "groups" : [
         "funcgen",
         "ersa"
      ],
      "name" : "FeaturePosition",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeaturePosition"
   },
   "FeatureTypesHaveSOAccessions" : {
      "datacheck_type" : "critical",
      "description" : "Checks that every feature type used by an experiment has an SO accession.",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "FeatureTypesHaveSOAccessions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeatureTypesHaveSOAccessions"
   },
   "FeatureTypesUnique" : {
      "datacheck_type" : "critical",
      "description" : "Checks that experiments do not link to feature types that are different, but have the same name.",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "FeatureTypesUnique",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeatureTypesUnique"
   },
   "ForeignKeys" : {
      "datacheck_type" : "critical",
      "description" : "Foreign key relationships are not violated",
      "groups" : [
         "ancestral",
         "brc4_core",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "ForeignKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeys"
   },
   "ForeignKeysCompara" : {
      "datacheck_type" : "critical",
      "description" : "Foreign key relationships are not violated",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "compara_references",
         "compara_homology_annotation",
         "compara_blastocyst"
      ],
      "name" : "ForeignKeysCompara",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeysCompara"
   },
   "ForeignKeysControlledTablesCore" : {
      "datacheck_type" : "critical",
      "description" : "Foreign key relationships for tables imported from the production database",
      "groups" : [
         "controlled_tables"
      ],
      "name" : "ForeignKeysControlledTablesCore",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeysControlledTablesCore"
   },
   "ForeignKeysControlledTablesVariation" : {
      "datacheck_type" : "critical",
      "description" : "Foreign key relationships for tables imported from the production database",
      "groups" : [
         "controlled_tables"
      ],
      "name" : "ForeignKeysControlledTablesVariation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeysControlledTablesVariation"
   },
   "ForeignKeysMultiDB" : {
      "datacheck_type" : "critical",
      "description" : "Foreign key relationships between tables from different databases are not violated",
      "groups" : [
         "core_sync",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "ForeignKeysMultiDB",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeysMultiDB"
   },
   "FuncgenAnalysisDescription" : {
      "datacheck_type" : "critical",
      "description" : "Probe features and feature sets have descriptions and are displayable",
      "groups" : [
         "analysis_description",
         "funcgen"
      ],
      "name" : "FuncgenAnalysisDescription",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FuncgenAnalysisDescription"
   },
   "GOXrefEvidence" : {
      "datacheck_type" : "critical",
      "description" : "All GO xrefs have an evidence",
      "groups" : [
         "xref",
         "core"
      ],
      "name" : "GOXrefEvidence",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GOXrefEvidence"
   },
   "GeneBiotypes" : {
      "datacheck_type" : "critical",
      "description" : "Genes and transcripts have valid biotypes",
      "groups" : [
         "controlled_tables",
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "GeneBiotypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBiotypes"
   },
   "GeneBounds" : {
      "datacheck_type" : "critical",
      "description" : "Genes are within the bounds of their seq_region",
      "groups" : [
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "GeneBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBounds"
   },
   "GeneCounts" : {
      "datacheck_type" : "critical",
      "description" : "Gene counts are correct",
      "groups" : [
         "core_statistics",
         "statistics"
      ],
      "name" : "GeneCounts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneCounts"
   },
   "GeneDescriptions" : {
      "datacheck_type" : "critical",
      "description" : "Gene descriptions are correctly formatted",
      "groups" : [
         "core",
         "xref",
         "xref_mapping"
      ],
      "name" : "GeneDescriptions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneDescriptions"
   },
   "GeneGC" : {
      "datacheck_type" : "critical",
      "description" : "All genes have a GC statistic",
      "groups" : [
         "core_statistics",
         "statistics"
      ],
      "name" : "GeneGC",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneGC"
   },
   "GeneStableID" : {
      "datacheck_type" : "critical",
      "description" : "Genes, transcripts, exons and translations have non-NULL, unique stable IDs",
      "groups" : [
         "core",
         "brc4_core",
         "geneset"
      ],
      "name" : "GeneStableID",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneStableID"
   },
   "GeneStrands" : {
      "datacheck_type" : "critical",
      "description" : "Genes have valid strand values",
      "groups" : [
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "GeneStrands",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneStrands"
   },
   "GeneTreeHighlighting" : {
      "datacheck_type" : "critical",
      "description" : "GO and InterPro xrefs are loaded for highlighting annotated genes",
      "groups" : [
         "compara_annot_highlight"
      ],
      "name" : "GeneTreeHighlighting",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneTreeHighlighting"
   },
   "GenomeDBCore" : {
      "datacheck_type" : "critical",
      "description" : "Species, assembly, and geneset metadata are the same in core and compara databases",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "core_sync"
      ],
      "name" : "GenomeDBCore",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GenomeDBCore"
   },
   "GenomeStatistics" : {
      "datacheck_type" : "critical",
      "description" : "Genome statistics are present and correct",
      "groups" : [
         "core_statistics",
         "statistics",
         "variation_statistics"
      ],
      "name" : "GenomeStatistics",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GenomeStatistics"
   },
   "HGNCNumeric" : {
      "datacheck_type" : "critical",
      "description" : "HGNC xrefs do not have the accession as the display_label",
      "groups" : [
         "core",
         "xref"
      ],
      "name" : "HGNCNumeric",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::HGNCNumeric"
   },
   "HGNCTypes" : {
      "datacheck_type" : "critical",
      "description" : "HGNC xrefs are attached to the appropriate object",
      "groups" : [
         "core",
         "xref"
      ],
      "name" : "HGNCTypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::HGNCTypes"
   },
   "HighConfidence" : {
      "datacheck_type" : "critical",
      "description" : "Checks that the HighConfidenceOrthologs pipeline has been run",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "HighConfidence",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::HighConfidence"
   },
   "IndividualType" : {
      "datacheck_type" : "critical",
      "description" : "Individuals have the correct type for each species",
      "groups" : [
         "variation_import"
      ],
      "name" : "IndividualType",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::IndividualType"
   },
   "InterProFeatures" : {
      "datacheck_type" : "critical",
      "description" : "InterPro data is present and correct",
      "groups" : [
         "protein_features"
      ],
      "name" : "InterProFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::InterProFeatures"
   },
   "Karyotype" : {
      "datacheck_type" : "critical",
      "description" : "Karyotype data exists for human, mouse and rat",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "Karyotype",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Karyotype"
   },
   "LRG" : {
      "datacheck_type" : "critical",
      "description" : "LRG features and seq_regions are correctly configured",
      "groups" : [
         "brc4_core",
         "core"
      ],
      "name" : "LRG",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::LRG"
   },
   "MLSSTagGERP" : {
      "datacheck_type" : "critical",
      "description" : "GERP analyses have appropriate tags",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "MLSSTagGERP",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MLSSTagGERP"
   },
   "MLSSTagHomology" : {
      "datacheck_type" : "critical",
      "description" : "Homologies have appropriate tags",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "MLSSTagHomology",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MLSSTagHomology"
   },
   "MLSSTagMaxAlign" : {
      "datacheck_type" : "critical",
      "description" : "Max align tags have correct values",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "MLSSTagMaxAlign",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MLSSTagMaxAlign"
   },
   "MLSSTagMultipleAlignment" : {
      "datacheck_type" : "critical",
      "description" : "Multiple alignments have appropriate tags",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "MLSSTagMultipleAlignment",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MLSSTagMultipleAlignment"
   },
   "MLSSTagPairwiseAlignment" : {
      "datacheck_type" : "critical",
      "description" : "Pairwise alignments have appropriate tags",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "MLSSTagPairwiseAlignment",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MLSSTagPairwiseAlignment"
   },
   "MLSSTagSynteny" : {
      "datacheck_type" : "critical",
      "description" : "Syntenies have appropriate tags",
      "groups" : [
         "compara",
         "compara_syntenies"
      ],
      "name" : "MLSSTagSynteny",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MLSSTagSynteny"
   },
   "MLSSTagThresholdDs" : {
      "datacheck_type" : "critical",
      "description" : "Threshold values for ds exist, if appropriate",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "MLSSTagThresholdDs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MLSSTagThresholdDs"
   },
   "MTCodonTable" : {
      "datacheck_type" : "critical",
      "description" : "MT seq region has codon table attribute",
      "groups" : [
         "core",
         "brc4_core"
      ],
      "name" : "MTCodonTable",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MTCodonTable"
   },
   "MartDatasetName" : {
      "datacheck_type" : "critical",
      "description" : "Check that the given core database mart dataset name is not exceeding MySQL limit of 64 chars and that they are unique accross all the divisions (except Bacteria)",
      "groups" : [
         "core",
         "biomart"
      ],
      "name" : "MartDatasetName",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MartDatasetName"
   },
   "MemberProductionCounts" : {
      "datacheck_type" : "critical",
      "description" : "Checks that the gene_member counts are appropriately populated",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_gene_tree_pipelines"
      ],
      "name" : "MemberProductionCounts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MemberProductionCounts"
   },
   "MetaCoord" : {
      "datacheck_type" : "critical",
      "description" : "The meta_coord table is correctly populated",
      "groups" : [
         "annotation",
         "brc4_core",
         "core",
         "core_sync",
         "corelike",
         "funcgen",
         "geneset",
         "protein_features",
         "variation"
      ],
      "name" : "MetaCoord",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaCoord"
   },
   "MetaKeyAssembly" : {
      "datacheck_type" : "critical",
      "description" : "Assembly data and meta keys are consistent",
      "groups" : [
         "assembly",
         "core",
         "brc4_core",
         "meta"
      ],
      "name" : "MetaKeyAssembly",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyAssembly"
   },
   "MetaKeyBRC4" : {
      "datacheck_type" : "critical",
      "description" : "Expected meta keys for BRC4 cores",
      "groups" : [
         "brc4_core"
      ],
      "name" : "MetaKeyBRC4",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyBRC4"
   },
   "MetaKeyCardinality" : {
      "datacheck_type" : "critical",
      "description" : "A subset of meta keys must only have a single value",
      "groups" : [
         "ancestral",
         "brc4_core",
         "core",
         "meta",
         "meta_sample"
      ],
      "name" : "MetaKeyCardinality",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyCardinality"
   },
   "MetaKeyConditional" : {
      "datacheck_type" : "critical",
      "description" : "Conditional meta keys exist if the data requires them",
      "groups" : [
         "core",
         "brc4_core",
         "meta",
         "variation"
      ],
      "name" : "MetaKeyConditional",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyConditional"
   },
   "MetaKeyConsistent" : {
      "datacheck_type" : "critical",
      "description" : "Assembly and species meta keys are identical between core and core-like databases",
      "groups" : [
         "core_sync",
         "corelike",
         "meta"
      ],
      "name" : "MetaKeyConsistent",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyConsistent"
   },
   "MetaKeyFormat" : {
      "datacheck_type" : "critical",
      "description" : "Meta values are correctly formatted and linked",
      "groups" : [
         "ancestral",
         "brc4_core",
         "core",
         "meta",
         "meta_sample",
         "variation"
      ],
      "name" : "MetaKeyFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyFormat"
   },
   "MetaKeyLevel" : {
      "datacheck_type" : "critical",
      "description" : "Meta keys are correctly assigned at species or database level",
      "groups" : [
         "ancestral",
         "brc4_core",
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "core",
         "corelike",
         "funcgen",
         "meta",
         "variation"
      ],
      "name" : "MetaKeyLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyLevel"
   },
   "MetaKeyOptional" : {
      "datacheck_type" : "advisory",
      "description" : "Optional, but expected, meta keys exist",
      "groups" : [
         "core",
         "meta"
      ],
      "name" : "MetaKeyOptional",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyOptional"
   },
   "MitochondriaAnnotated" : {
      "datacheck_type" : "critical",
      "description" : "Mitochondrial seq_regions have appropriate attribute",
      "groups" : [
         "assembly",
         "core",
         "brc4_core"
      ],
      "name" : "MitochondriaAnnotated",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MitochondriaAnnotated"
   },
   "MultipleGenomicAlignBlockIds" : {
      "datacheck_type" : "critical",
      "description" : "Check that every genomic_align_block_id has more than one genomic_align_id",
      "groups" : [
         "compara",
         "compara_genome_alignments"
      ],
      "name" : "MultipleGenomicAlignBlockIds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MultipleGenomicAlignBlockIds"
   },
   "MultipleSeqRegions" : {
      "datacheck_type" : "critical",
      "description" : "Tables have multiple seq regions",
      "groups" : [
         "variation"
      ],
      "name" : "MultipleSeqRegions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MultipleSeqRegions"
   },
   "MultipleVariationClasses" : {
      "datacheck_type" : "advisory",
      "description" : "Variation table has multiple classes",
      "groups" : [
         "variation"
      ],
      "name" : "MultipleVariationClasses",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MultipleVariationClasses"
   },
   "MySQLStorageEngine" : {
      "datacheck_type" : "critical",
      "description" : "Database schema matches expected MySQL storage engine",
      "groups" : [
         "compara",
         "compara_homology_annotation",
         "core",
         "brc4_core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "MySQLStorageEngine",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MySQLStorageEngine"
   },
   "NCBIGeneLabels" : {
      "datacheck_type" : "critical",
      "description" : "NCBI genes have display xrefs",
      "groups" : [
         "corelike",
         "xref"
      ],
      "name" : "NCBIGeneLabels",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::NCBIGeneLabels"
   },
   "NoDataOnGenomeComponents" : {
      "datacheck_type" : "critical",
      "description" : "Data is only allowed on principle genomes and not components",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_syntenies",
         "compara_homology_annotation",
         "compara_blastocyst",
         "compara_gene_tree_pipelines"
      ],
      "name" : "NoDataOnGenomeComponents",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::NoDataOnGenomeComponents"
   },
   "ObjectXrefNull" : {
      "datacheck_type" : "advisory",
      "description" : "Object_xrefs should be linked to an analysis",
      "groups" : [
         "brc4_core",
         "core",
         "xref"
      ],
      "name" : "ObjectXrefNull",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ObjectXrefNull"
   },
   "PepstatsAttributes" : {
      "datacheck_type" : "critical",
      "description" : "All translations have peptide statistics",
      "groups" : [
         "core_statistics",
         "statistics"
      ],
      "name" : "PepstatsAttributes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PepstatsAttributes"
   },
   "PhenotypeDescription" : {
      "datacheck_type" : "advisory",
      "description" : "Imported descriptions contain only supported characters",
      "groups" : [
         "variation_import"
      ],
      "name" : "PhenotypeDescription",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeDescription"
   },
   "PhenotypeDescriptionMissing" : {
      "datacheck_type" : "critical",
      "description" : "Phenotype does not have empty descriptions",
      "groups" : [
         "variation_import"
      ],
      "name" : "PhenotypeDescriptionMissing",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeDescriptionMissing"
   },
   "PhenotypeFeatureAttrib" : {
      "datacheck_type" : "advisory",
      "description" : "Imported phenotype_feature_attrib value is meaningful and well-formed",
      "groups" : [
         "variation_import"
      ],
      "name" : "PhenotypeFeatureAttrib",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeFeatureAttrib"
   },
   "PhenotypeMultipleSeqRegions" : {
      "datacheck_type" : "critical",
      "description" : "Phenotypes on multiple seq regions",
      "groups" : [
         "variation"
      ],
      "name" : "PhenotypeMultipleSeqRegions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeMultipleSeqRegions"
   },
   "PlastidsAnnotated" : {
      "datacheck_type" : "critical",
      "description" : "Plastid seq_regions have appropriate attribute",
      "groups" : [
         "assembly",
         "core",
         "brc4_core"
      ],
      "name" : "PlastidsAnnotated",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PlastidsAnnotated"
   },
   "PolyploidAttribs" : {
      "datacheck_type" : "critical",
      "description" : "Component genomes are annotated for polyploid genomes",
      "groups" : [
         "assembly",
         "core",
         "brc4_core"
      ],
      "name" : "PolyploidAttribs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PolyploidAttribs"
   },
   "Population" : {
      "datacheck_type" : "critical",
      "description" : "Population data is consistent",
      "groups" : [
         "variation_import"
      ],
      "name" : "Population",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Population"
   },
   "PredictionTranscriptLabels" : {
      "datacheck_type" : "critical",
      "description" : "Predicted transcripts have display labels",
      "groups" : [
         "annotation",
         "core"
      ],
      "name" : "PredictionTranscriptLabels",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PredictionTranscriptLabels"
   },
   "ProbeUnique" : {
      "datacheck_type" : "critical",
      "description" : "Probe IDs and mappings are unique",
      "groups" : [
         "funcgen",
         "probe_mapping"
      ],
      "name" : "ProbeUnique",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProbeUnique"
   },
   "ProteinCodingGenes" : {
      "datacheck_type" : "critical",
      "description" : "At least one protein-coding gene exists",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "ProteinCodingGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinCodingGenes"
   },
   "ProteinFeatureLength" : {
      "datacheck_type" : "critical",
      "description" : "Protein features do not extend beyond the bounds of the translated sequence",
      "groups" : [
         "protein_features"
      ],
      "name" : "ProteinFeatureLength",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinFeatureLength"
   },
   "ProteinFeatures" : {
      "datacheck_type" : "critical",
      "description" : "Protein features are present and correct",
      "groups" : [
         "protein_features"
      ],
      "name" : "ProteinFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinFeatures"
   },
   "ProteinFunctionPredictions" : {
      "datacheck_type" : "critical",
      "description" : "prediction_matrix is not NULL or empty",
      "groups" : [
         "variation"
      ],
      "name" : "ProteinFunctionPredictions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinFunctionPredictions"
   },
   "ProteinTranslation" : {
      "datacheck_type" : "critical",
      "description" : "All protein-coding genes have a valid translation",
      "groups" : [
         "core",
         "brc4_core",
         "geneset"
      ],
      "name" : "ProteinTranslation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinTranslation"
   },
   "Publication" : {
      "datacheck_type" : "critical",
      "description" : "There are no duplicated publication entries",
      "groups" : [
         "variation_import"
      ],
      "name" : "Publication",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Publication"
   },
   "PublicationDisplay" : {
      "datacheck_type" : "critical",
      "description" : "Publication cited variants display",
      "groups" : [
         "variation_import"
      ],
      "name" : "PublicationDisplay",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PublicationDisplay"
   },
   "RNASeqDNAAlignFeatureAnalyses" : {
      "datacheck_type" : "critical",
      "description" : "In an RNA-seq database all DNA alignment features and related analyses are linked correctly.",
      "groups" : [
         "corelike"
      ],
      "name" : "RNASeqDNAAlignFeatureAnalyses",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RNASeqDNAAlignFeatureAnalyses"
   },
   "ReadFileNames" : {
      "datacheck_type" : "critical",
      "description" : "Checks that read file names are valid.",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "ReadFileNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ReadFileNames"
   },
   "ReadFilePathEncrypted" : {
      "datacheck_type" : "critical",
      "description" : "Checks if paths stored in the file column of the read_file table are encrypted",
      "groups" : [
         "funcgen"
      ],
      "name" : "ReadFilePathEncrypted",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ReadFilePathEncrypted"
   },
   "RegulatoryFeatureIsActive" : {
      "datacheck_type" : "critical",
      "description" : "All regulatory features have a valid activity value in at least one epigenome",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "RegulatoryFeatureIsActive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RegulatoryFeatureIsActive"
   },
   "RegulatoryFeatureStableID" : {
      "datacheck_type" : "critical",
      "description" : "Regulatory feature stable IDs are unique within a regulatory build",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "RegulatoryFeatureStableID",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RegulatoryFeatureStableID"
   },
   "RepeatFeatures" : {
      "datacheck_type" : "critical",
      "description" : "Repeat feature coordinates are present and correct",
      "groups" : [
         "annotation",
         "core",
         "brc4_core"
      ],
      "name" : "RepeatFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RepeatFeatures"
   },
   "SNPCounts" : {
      "datacheck_type" : "critical",
      "description" : "SNP counts are correct",
      "groups" : [
         "statistics",
         "variation_statistics"
      ],
      "name" : "SNPCounts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SNPCounts"
   },
   "SampleRegulatoryFeatureExists" : {
      "datacheck_type" : "critical",
      "description" : "Current regulatory build has a sample regulatory feature",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "SampleRegulatoryFeatureExists",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SampleRegulatoryFeatureExists"
   },
   "SchemaPatchesApplied" : {
      "datacheck_type" : "critical",
      "description" : "Schema patches are up-to-date",
      "groups" : [
         "brc4_core",
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "SchemaPatchesApplied",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaPatchesApplied"
   },
   "SchemaType" : {
      "datacheck_type" : "critical",
      "description" : "The schema type meta key matches the DB name",
      "groups" : [
         "brc4_core",
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "compara_references",
         "compara_homology_annotation",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "SchemaType",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaType"
   },
   "SchemaVersion" : {
      "datacheck_type" : "critical",
      "description" : "The schema version meta key matches the DB name",
      "groups" : [
         "ancestral",
         "brc4_core",
         "compara",
         "compara_homology_annotation",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "SchemaVersion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaVersion"
   },
   "SeqRegionBRC4" : {
      "datacheck_type" : "critical",
      "description" : "Seq_region for BRC4 have correct attributes",
      "groups" : [
         "brc4_core"
      ],
      "name" : "SeqRegionBRC4",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionBRC4"
   },
   "SeqRegionNames" : {
      "datacheck_type" : "critical",
      "description" : "Seq_region names are unique (top-level) or consistent (non-top-level)",
      "groups" : [
         "ancestral",
         "assembly",
         "brc4_core",
         "core"
      ],
      "name" : "SeqRegionNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNames"
   },
   "SeqRegionNamesENA" : {
      "datacheck_type" : "advisory",
      "description" : "Seq_region contig names from ENA are appropriately formatted and attributed",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SeqRegionNamesENA",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNamesENA"
   },
   "SeqRegionNamesINSDCAdvisory" : {
      "datacheck_type" : "advisory",
      "description" : "Seq_region names from INSDC are appropriately formatted and attributed",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SeqRegionNamesINSDCAdvisory",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNamesINSDCAdvisory"
   },
   "SeqRegionNamesINSDCCritical" : {
      "datacheck_type" : "critical",
      "description" : "Seq_region names from INSDC are appropriately formatted and attributed",
      "groups" : [
         "ena_submission",
         "rapid_release"
      ],
      "name" : "SeqRegionNamesINSDCCritical",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNamesINSDCCritical"
   },
   "SeqRegionRank" : {
      "datacheck_type" : "critical",
      "description" : "Chromosomes have rank 1",
      "groups" : [
         "assembly",
         "core",
         "brc4_core"
      ],
      "name" : "SeqRegionRank",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionRank"
   },
   "SeqRegionSynonyms" : {
      "datacheck_type" : "critical",
      "description" : "Seq_region synonyms do not clash with seq region names",
      "groups" : [
         "assembly",
         "brc4_core",
         "core"
      ],
      "name" : "SeqRegionSynonyms",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionSynonyms"
   },
   "SeqRegionTopLevel" : {
      "datacheck_type" : "critical",
      "description" : "Top-level seq_regions are appropriately configured",
      "groups" : [
         "assembly",
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "SeqRegionTopLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionTopLevel"
   },
   "SequenceLevel" : {
      "datacheck_type" : "critical",
      "description" : "DNA is attached, and only attached, to sequence-level seq_regions",
      "groups" : [
         "assembly",
         "core",
         "brc4_core"
      ],
      "name" : "SequenceLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SequenceLevel"
   },
   "SignalControlMismatches" : {
      "datacheck_type" : "critical",
      "description" : "Checks that signals are not matched to the wrong controls.",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "SignalControlMismatches",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SignalControlMismatches"
   },
   "SimpleFeatureAnalysisTypes" : {
      "datacheck_type" : "critical",
      "description" : "Simple features are not from analysis type gene, mrna and cds",
      "groups" : [
         "core",
         "brc4_core"
      ],
      "name" : "SimpleFeatureAnalysisTypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SimpleFeatureAnalysisTypes"
   },
   "Source" : {
      "datacheck_type" : "critical",
      "description" : "Source table has consistent URLs and no duplicated names",
      "groups" : [
         "variation_import"
      ],
      "name" : "Source",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Source"
   },
   "SourceAdvisory" : {
      "datacheck_type" : "advisory",
      "description" : "Source table contains descriptions and the same dbSNP version",
      "groups" : [
         "variation_import"
      ],
      "name" : "SourceAdvisory",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SourceAdvisory"
   },
   "SpeciesCommonName" : {
      "datacheck_type" : "critical",
      "description" : "Meta key species.common_name should be same for species from a group of strains or breeds",
      "groups" : [
         "core_sync"
      ],
      "name" : "SpeciesCommonName",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesCommonName"
   },
   "SpeciesNameUnique" : {
      "datacheck_type" : "critical",
      "description" : "Species production_name and alias are unique across all databases in the registry",
      "groups" : [
         "core",
         "brc4_core",
         "meta"
      ],
      "name" : "SpeciesNameUnique",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesNameUnique"
   },
   "SpeciesStrainGroup" : {
      "datacheck_type" : "critical",
      "description" : "Disallow Species Strain Group Meta Key",
      "groups" : [
         "rapid_release"
      ],
      "name" : "SpeciesStrainGroup",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesStrainGroup"
   },
   "SpeciesTaxonomy" : {
      "datacheck_type" : "critical",
      "description" : "Taxonomic meta keys are consistent with taxonomy database",
      "groups" : [
         "core",
         "brc4_core",
         "meta"
      ],
      "name" : "SpeciesTaxonomy",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesTaxonomy"
   },
   "StableIdDisplayXref" : {
      "datacheck_type" : "critical",
      "description" : "Genes/Transcript display_xref does not have display_label set as stable_id",
      "groups" : [
         "core",
         "xref",
         "xref_mapping"
      ],
      "name" : "StableIdDisplayXref",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::StableIdDisplayXref"
   },
   "StrainType" : {
      "datacheck_type" : "critical",
      "description" : "The strain type must be from an approved list",
      "groups" : [
         "rapid_release"
      ],
      "name" : "StrainType",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::StrainType"
   },
   "StructuralVariationFeature" : {
      "datacheck_type" : "critical",
      "description" : "StructuralVariationFeature table data is present and correct",
      "groups" : [
         "variation"
      ],
      "name" : "StructuralVariationFeature",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::StructuralVariationFeature"
   },
   "StructuralVariationSomatic" : {
      "datacheck_type" : "critical",
      "description" : "Structural variants imported from COSMIC are somatic",
      "groups" : [
         "variation"
      ],
      "name" : "StructuralVariationSomatic",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::StructuralVariationSomatic"
   },
   "TSLCoverage" : {
      "datacheck_type" : "advisory",
      "description" : "TSL covers 95% of protein-coding gene on each chromosome",
      "groups" : [
         "geneset_support_level"
      ],
      "name" : "TSLCoverage",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::TSLCoverage"
   },
   "TagCoverageStats" : {
      "datacheck_type" : "critical",
      "description" : "The coverage must not exceed the genome lengths",
      "groups" : [
         "compara",
         "compara_genome_alignments",
         "compara_syntenies"
      ],
      "name" : "TagCoverageStats",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::TagCoverageStats"
   },
   "TranscriptBounds" : {
      "datacheck_type" : "critical",
      "description" : "Gene and transcript bounds are consistent",
      "groups" : [
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "TranscriptBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::TranscriptBounds"
   },
   "TranscriptDisplayXrefSuffix" : {
      "datacheck_type" : "critical",
      "description" : "Transcripts do not have a display xref with a -20* suffix. These are created by the non-vert Xref pipeline unless a flag is enabled: http://www.ebi.ac.uk/seqdb/confluence/display/EnsGen/Xref+mapping#Xrefmapping-CustomisingXrefMapping(DisplayXrefs)",
      "groups" : [
         "xref",
         "core"
      ],
      "name" : "TranscriptDisplayXrefSuffix",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::TranscriptDisplayXrefSuffix"
   },
   "TranscriptSupport" : {
      "datacheck_type" : "critical",
      "description" : "Check for presence of TSL and GENCODE attributes, and CCDS xrefs",
      "groups" : [
         "core",
         "geneset_support_level"
      ],
      "name" : "TranscriptSupport",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::TranscriptSupport"
   },
   "TranscriptVariation" : {
      "datacheck_type" : "critical",
      "description" : "TranscriptVariation data is present and correct",
      "groups" : [
         "variation_effect"
      ],
      "name" : "TranscriptVariation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::TranscriptVariation"
   },
   "UniProtDisplayXref" : {
      "datacheck_type" : "critical",
      "description" : "Gene display xrefs are only attached to UniProtKB Gene Names (Uniprot_gn)",
      "groups" : [
         "core",
         "xref",
         "xref_mapping"
      ],
      "name" : "UniProtDisplayXref",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::UniProtDisplayXref"
   },
   "UniqueKeysCompara" : {
      "datacheck_type" : "critical",
      "description" : "Unique key relationships are not violated",
      "groups" : [
         "compara",
         "compara_gene_trees",
         "compara_genome_alignments",
         "compara_master",
         "compara_syntenies",
         "compara_gene_tree_pipelines"
      ],
      "name" : "UniqueKeysCompara",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::UniqueKeysCompara"
   },
   "UnlocatedTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Transcripts are linked to sequences",
      "groups" : [
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "UnlocatedTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::UnlocatedTranscripts"
   },
   "UnreviewedXrefs" : {
      "datacheck_type" : "critical",
      "description" : "Uniprot xrefs do not have Unreviewed as their primary DB accession",
      "groups" : [
         "core",
         "xref",
         "xref_mapping"
      ],
      "name" : "UnreviewedXrefs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::UnreviewedXrefs"
   },
   "ValidTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Transcripts have translations, if appropriate",
      "groups" : [
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "ValidTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ValidTranscripts"
   },
   "ValidTranslations" : {
      "datacheck_type" : "critical",
      "description" : "Translations have appropriate properties",
      "groups" : [
         "core",
         "brc4_core",
         "corelike",
         "geneset"
      ],
      "name" : "ValidTranslations",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ValidTranslations"
   },
   "Variation" : {
      "datacheck_type" : "critical",
      "description" : "Variation table data is present and correct",
      "groups" : [
         "variation_tables"
      ],
      "name" : "Variation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Variation"
   },
   "VariationClasses" : {
      "datacheck_type" : "advisory",
      "description" : "Variation number of classes is correct",
      "groups" : [
         "variation_import"
      ],
      "name" : "VariationClasses",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationClasses"
   },
   "VariationFeature" : {
      "datacheck_type" : "critical",
      "description" : "VariationFeature table data is present and correct",
      "groups" : [
         "variation_tables"
      ],
      "name" : "VariationFeature",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationFeature"
   },
   "VariationFeatureAlleles" : {
      "datacheck_type" : "critical",
      "description" : "VariationFeature has alleles",
      "groups" : [
         "variation_tables"
      ],
      "name" : "VariationFeatureAlleles",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationFeatureAlleles"
   },
   "VariationFeaturePAR" : {
      "datacheck_type" : "advisory",
      "description" : "Variants do not map to Y PAR",
      "groups" : [
         "variation_tables"
      ],
      "name" : "VariationFeaturePAR",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationFeaturePAR"
   },
   "VariationSet" : {
      "datacheck_type" : "critical",
      "description" : "Variation set is not missing name/description and contains valid id",
      "groups" : [
         "variation_import"
      ],
      "name" : "VariationSet",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationSet"
   },
   "VariationSetAttrib" : {
      "datacheck_type" : "critical",
      "description" : "The short name attrib for variation_set_id exists and is defined in attrib table",
      "groups" : [
         "variation_import"
      ],
      "name" : "VariationSetAttrib",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationSetAttrib"
   },
   "VariationSetStructure" : {
      "datacheck_type" : "critical",
      "description" : "Variation set only has one super set attached to it",
      "groups" : [
         "variation_import"
      ],
      "name" : "VariationSetStructure",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationSetStructure"
   },
   "VariationSubset" : {
      "datacheck_type" : "critical",
      "description" : "Variation set is not a subset of itself and variants are only present in set",
      "groups" : [
         "variation_import"
      ],
      "name" : "VariationSubset",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationSubset"
   },
   "VersionedGenes" : {
      "datacheck_type" : "critical",
      "description" : "Genes are versioned in vertebrate databases, and unversioned in non-vertebrate databases",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "VersionedGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VersionedGenes"
   },
   "VersionedGenesBRC4" : {
      "datacheck_type" : "critical",
      "description" : "Genes are unversioned in BRC4 databases",
      "groups" : [
         "brc4_core"
      ],
      "name" : "VersionedGenesBRC4",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VersionedGenesBRC4"
   },
   "WhitespaceAdvisory" : {
      "datacheck_type" : "advisory",
      "description" : "Fields do not contain tabs or newlines (\"\\t\", \"\\n\")",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "WhitespaceAdvisory",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::WhitespaceAdvisory"
   },
   "WhitespaceCritical" : {
      "datacheck_type" : "critical",
      "description" : "Fields do not contain carriage returns (\"\\r\")",
      "groups" : [
         "compara",
         "compara_blastocyst",
         "compara_homology_annotation",
         "compara_references",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "WhitespaceCritical",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::WhitespaceCritical"
   },
   "XrefFormat" : {
      "datacheck_type" : "critical",
      "description" : "Xref accessions, labels, and descriptions are validly formatted",
      "groups" : [
         "core",
         "xref",
         "xref_mapping"
      ],
      "name" : "XrefFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::XrefFormat"
   },
   "XrefPrefixes" : {
      "datacheck_type" : "critical",
      "description" : "Check that xrefs have the correct prefix for their dbprimary_acc",
      "groups" : [
         "core",
         "xref",
         "xref_mapping"
      ],
      "name" : "XrefPrefixes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::XrefPrefixes"
   },
   "XrefTypes" : {
      "datacheck_type" : "critical",
      "description" : "Xrefs are only attached to one feature type.",
      "groups" : [
         "core",
         "xref",
         "xref_mapping"
      ],
      "name" : "XrefTypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::XrefTypes"
   }
}
