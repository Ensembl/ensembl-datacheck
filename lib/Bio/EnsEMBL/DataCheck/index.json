{
   "AlignFeatureExternalDB" : {
      "datacheck_type" : "advisory",
      "description" : "All alignment features are linked to an external DB",
      "groups" : [
         "annotation",
         "core",
         "corelike"
      ],
      "name" : "AlignFeatureExternalDB",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AlignFeatureExternalDB"
   },
   "AlignmentReadFileOrphans" : {
      "datacheck_type" : "critical",
      "description" : "Check that all read files are used in an alignment",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_alignments"
      ],
      "name" : "AlignmentReadFileOrphans",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AlignmentReadFileOrphans"
   },
   "AltAllele" : {
      "datacheck_type" : "critical",
      "description" : "Alt allele group members map back to the same chromosome",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "AltAllele",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AltAllele"
   },
   "AltAlleleGroup" : {
      "datacheck_type" : "critical",
      "description" : "No alt_allele_group has more than one gene from the primary assembly",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "AltAlleleGroup",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AltAlleleGroup"
   },
   "AnalysisDescription" : {
      "datacheck_type" : "critical",
      "description" : "Gene analyses have descriptions",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "AnalysisDescription",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AnalysisDescription"
   },
   "AnalysisFormat" : {
      "datacheck_type" : "critical",
      "description" : "Analysis logic name and date are formatted correctly",
      "groups" : [
         "core",
         "corelike"
      ],
      "name" : "AnalysisFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AnalysisFormat"
   },
   "Archive" : {
      "datacheck_type" : "critical",
      "description" : "Gene archive table is up to date",
      "groups" : [
         "id_mapping"
      ],
      "name" : "Archive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Archive"
   },
   "ArraysHaveProbes" : {
      "datacheck_type" : "critical",
      "description" : "All arrays are associated with probes",
      "groups" : [
         "funcgen",
         "probe_mapping"
      ],
      "name" : "ArraysHaveProbes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ArraysHaveProbes"
   },
   "AssemblyExceptions" : {
      "datacheck_type" : "critical",
      "description" : "Assembly exceptions are correctly configured",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "AssemblyExceptions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyExceptions"
   },
   "AssemblySeqregion" : {
      "datacheck_type" : "critical",
      "description" : "Assembly and seq_region tables are consistent",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "AssemblySeqregion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblySeqregion"
   },
   "AttribValues" : {
      "datacheck_type" : "advisory",
      "description" : "TSL, APPRIS, GENCODE and RefSeq attributes exist",
      "groups" : [
         "geneset"
      ],
      "name" : "AttribValues",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AttribValues"
   },
   "BlankEnums" : {
      "datacheck_type" : "critical",
      "description" : "Enum columns do not have empty string values",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "BlankEnums",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::BlankEnums"
   },
   "BlankNulls" : {
      "datacheck_type" : "critical",
      "description" : "Nullable columns do not have empty string values",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "BlankNulls",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::BlankNulls"
   },
   "CanonicalTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Canonical transcripts and translation are correctly configured",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "CanonicalTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CanonicalTranscripts"
   },
   "ChromosomesAnnotated" : {
      "datacheck_type" : "critical",
      "description" : "Chromosomal seq_regions have appropriate attribute",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "ChromosomesAnnotated",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ChromosomesAnnotated"
   },
   "CompareAllele" : {
      "datacheck_type" : "advisory",
      "description" : "Compare allele counts between two databases",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareAllele",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareAllele"
   },
   "CompareBiotypeGroup" : {
      "datacheck_type" : "advisory",
      "description" : "Compare gene counts between two databases, categorised by biotype",
      "groups" : [
         "compare_core"
      ],
      "name" : "CompareBiotypeGroup",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareBiotypeGroup"
   },
   "CompareConsequenceTypes" : {
      "datacheck_type" : "advisory",
      "description" : "Compare transcript_variation counts between two databases, categorised by consequence type",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareConsequenceTypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareConsequenceTypes"
   },
   "CompareGOXref" : {
      "datacheck_type" : "advisory",
      "description" : "Compare GO xref counts between two databases, categorised by source",
      "groups" : [
         "compare_core",
         "xref"
      ],
      "name" : "CompareGOXref",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareGOXref"
   },
   "CompareSchema" : {
      "datacheck_type" : "critical",
      "description" : "Compare database schema to definition in SQL file",
      "groups" : [
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "CompareSchema",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareSchema"
   },
   "CompareSynonym" : {
      "datacheck_type" : "advisory",
      "description" : "Compare synonym counts between two databases, categorised by external_db",
      "groups" : [
         "compare_core",
         "xref"
      ],
      "name" : "CompareSynonym",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareSynonym"
   },
   "CompareVariationClasses" : {
      "datacheck_type" : "advisory",
      "description" : "Compare variation counts between two databases, categorised by variation class",
      "groups" : [
         "compare_variation"
      ],
      "name" : "CompareVariationClasses",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareVariationClasses"
   },
   "CompareXref" : {
      "datacheck_type" : "advisory",
      "description" : "Compare xref counts between two databases, categorised by external_db",
      "groups" : [
         "compare_core",
         "xref"
      ],
      "name" : "CompareXref",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareXref"
   },
   "ControlAlignmentNamingConvention" : {
      "datacheck_type" : "critical",
      "description" : "By convention all controls should have WCE in their name and signals should not.",
      "groups" : [
         "funcgen",
         "funcgen_alignments",
         "regulatory_build"
      ],
      "name" : "ControlAlignmentNamingConvention",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlAlignmentNamingConvention"
   },
   "ControlledAnalysis" : {
      "datacheck_type" : "critical",
      "description" : "Analysis descriptions and display settings are consistent with production database",
      "groups" : [
         "controlled_tables",
         "core",
         "corelike"
      ],
      "name" : "ControlledAnalysis",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledAnalysis"
   },
   "ControlledMetaKeys" : {
      "datacheck_type" : "critical",
      "description" : "Meta keys are consistent with production database",
      "groups" : [
         "controlled_tables",
         "core",
         "corelike",
         "meta",
         "funcgen",
         "variation"
      ],
      "name" : "ControlledMetaKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledMetaKeys"
   },
   "ControlledTablesCore" : {
      "datacheck_type" : "critical",
      "description" : "Controlled tables are consistent with production database",
      "groups" : [
         "controlled_tables",
         "core",
         "corelike"
      ],
      "name" : "ControlledTablesCore",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesCore"
   },
   "ControlledTablesVariation" : {
      "datacheck_type" : "critical",
      "description" : "Controlled tables are consistent with production database",
      "groups" : [
         "controlled_tables",
         "variation"
      ],
      "name" : "ControlledTablesVariation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesVariation"
   },
   "CoreTables" : {
      "datacheck_type" : "critical",
      "description" : "Requisite core-like tables are identical to those in the core database",
      "groups" : [
         "corelike"
      ],
      "name" : "CoreTables",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CoreTables"
   },
   "CurrentRegulatoryBuildHasEpigenomes" : {
      "datacheck_type" : "critical",
      "description" : "Current regulatory build has epigenome data",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "CurrentRegulatoryBuildHasEpigenomes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CurrentRegulatoryBuildHasEpigenomes"
   },
   "DNAEmpty" : {
      "datacheck_type" : "critical",
      "description" : "Core-like databases do not contain DNA sequences",
      "groups" : [
         "corelike"
      ],
      "name" : "DNAEmpty",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DNAEmpty"
   },
   "DataFilesExist" : {
      "datacheck_type" : "critical",
      "description" : "Data files are defined where necessary, and exist on the filesystem",
      "groups" : [
         "funcgen"
      ],
      "name" : "DataFilesExist",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DataFilesExist"
   },
   "DatabaseCollation" : {
      "datacheck_type" : "critical",
      "description" : "All tables have the same collation (latin1_swedish_ci)",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "DatabaseCollation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DatabaseCollation"
   },
   "Denormalized" : {
      "datacheck_type" : "critical",
      "description" : "Denormalized columns are synchronised",
      "groups" : [
         "variation",
         "schema"
      ],
      "name" : "Denormalized",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Denormalized"
   },
   "DensityFeatures" : {
      "datacheck_type" : "critical",
      "description" : "Density statistics are present and correct for chromosomal species",
      "groups" : [
         "core_statistics",
         "statistics"
      ],
      "name" : "DensityFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DensityFeatures"
   },
   "DensitySNPs" : {
      "datacheck_type" : "critical",
      "description" : "Density statistics are present and correct for SNPs",
      "groups" : [
         "statistics",
         "variation_statistics"
      ],
      "name" : "DensitySNPs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DensitySNPs"
   },
   "DisplayableGenes" : {
      "datacheck_type" : "advisory",
      "description" : "Genes are displayable and have web_data attached to their analysis",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "DisplayableGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DisplayableGenes"
   },
   "DuplicateReadNames" : {
      "datacheck_type" : "critical",
      "description" : "Duplicate read names",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "DuplicateReadNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DuplicateReadNames"
   },
   "EpigenomeHasSegmentationFile" : {
      "datacheck_type" : "critical",
      "description" : "All epigenomes in the current regulatory build have a segmentation file",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "EpigenomeHasSegmentationFile",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::EpigenomeHasSegmentationFile"
   },
   "ExonBounds" : {
      "datacheck_type" : "critical",
      "description" : "Exon regions are non-overlapping, and are consistent with their transcripts",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "ExonBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExonBounds"
   },
   "ExonRank" : {
      "datacheck_type" : "critical",
      "description" : "Exon/transcript links are not duplicated, and rank=1 exons exist for every transcript",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "ExonRank",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExonRank"
   },
   "ExperimentHasFeatureSet" : {
      "datacheck_type" : "critical",
      "description" : "All distinct experiment, epigenome and feature_type combinations are linked to a feature_set",
      "groups" : [
         "funcgen",
         "ersa"
      ],
      "name" : "ExperimentHasFeatureSet",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExperimentHasFeatureSet"
   },
   "FeatureBounds" : {
      "datacheck_type" : "critical",
      "description" : "Feature co-ordinates are within the bounds of their seq_region",
      "groups" : [
         "annotation",
         "core",
         "corelike"
      ],
      "name" : "FeatureBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeatureBounds"
   },
   "FeaturePosition" : {
      "datacheck_type" : "critical",
      "description" : "Feature co-ordinates are within the bounds of their seq_region",
      "groups" : [
         "funcgen",
         "ersa"
      ],
      "name" : "FeaturePosition",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeaturePosition"
   },
   "FeatureTypesHaveSOAccessions" : {
      "datacheck_type" : "critical",
      "description" : "Checks that every feature type used by an experiment has an SO accession.",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "FeatureTypesHaveSOAccessions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeatureTypesHaveSOAccessions"
   },
   "FeatureTypesUnique" : {
      "datacheck_type" : "critical",
      "description" : "Checks that experiments do not link to feature types that are different, but have the same name.",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "FeatureTypesUnique",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeatureTypesUnique"
   },
   "ForeignKeys" : {
      "datacheck_type" : "critical",
      "description" : "Foreign key relationships are not violated",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "ForeignKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeys"
   },
   "ForeignKeysMultiDB" : {
      "datacheck_type" : "critical",
      "description" : "Foreign key relationships between tables from different databases are not violated",
      "groups" : [
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "ForeignKeysMultiDB",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeysMultiDB"
   },
   "FuncgenAnalysisDescription" : {
      "datacheck_type" : "critical",
      "description" : "Probe features and feature sets have descriptions and are displayable",
      "groups" : [
         "funcgen"
      ],
      "name" : "FuncgenAnalysisDescription",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FuncgenAnalysisDescription"
   },
   "GeneBiotypes" : {
      "datacheck_type" : "critical",
      "description" : "Genes and transcripts have valid biotypes",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "GeneBiotypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBiotypes"
   },
   "GeneBounds" : {
      "datacheck_type" : "critical",
      "description" : "Genes are within the bounds of their seq_region",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "GeneBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBounds"
   },
   "GeneCounts" : {
      "datacheck_type" : "critical",
      "description" : "Gene counts are correct",
      "groups" : [
         "core_statistics",
         "statistics"
      ],
      "name" : "GeneCounts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneCounts"
   },
   "GeneGC" : {
      "datacheck_type" : "critical",
      "description" : "All genes have a GC statistic",
      "groups" : [
         "core_statistics",
         "statistics"
      ],
      "name" : "GeneGC",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneGC"
   },
   "GeneStableID" : {
      "datacheck_type" : "critical",
      "description" : "Genes, transcripts, exons and translations have non-NULL, unique stable IDs",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "GeneStableID",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneStableID"
   },
   "GeneStrands" : {
      "datacheck_type" : "critical",
      "description" : "Genes have valid strand values",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "GeneStrands",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneStrands"
   },
   "GenomeStatistics" : {
      "datacheck_type" : "critical",
      "description" : "Genome statistics are present and correct",
      "groups" : [
         "core_statistics",
         "statistics",
         "variation_statistics"
      ],
      "name" : "GenomeStatistics",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GenomeStatistics"
   },
   "IndividualType" : {
      "datacheck_type" : "critical",
      "description" : "Individuals have the correct type for each species",
      "groups" : [
         "variation_import"
      ],
      "name" : "IndividualType",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::IndividualType"
   },
   "InterProFeatures" : {
      "datacheck_type" : "critical",
      "description" : "InterPro data is present and correct",
      "groups" : [
         "protein_features"
      ],
      "name" : "InterProFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::InterProFeatures"
   },
   "Karyotype" : {
      "datacheck_type" : "advisory",
      "description" : "Karyotype data exists for human, mouse and rat",
      "groups" : [
         "assembly"
      ],
      "name" : "Karyotype",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Karyotype"
   },
   "LRG" : {
      "datacheck_type" : "critical",
      "description" : "LRG features and seq_regions are correctly configured",
      "groups" : [
         "core",
         "xref"
      ],
      "name" : "LRG",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::LRG"
   },
   "MTCodonTable" : {
      "datacheck_type" : "critical",
      "description" : "MT seq region has codon table attribute",
      "groups" : [
         "core"
      ],
      "name" : "MTCodonTable",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MTCodonTable"
   },
   "MetaCoord" : {
      "datacheck_type" : "critical",
      "description" : "The meta_coord table is correctly populated",
      "groups" : [
         "annotation",
         "core",
         "corelike",
         "funcgen",
         "geneset",
         "protein_features",
         "variation"
      ],
      "name" : "MetaCoord",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaCoord"
   },
   "MetaKeyAssembly" : {
      "datacheck_type" : "critical",
      "description" : "Assembly data and meta keys are consistent",
      "groups" : [
         "assembly",
         "core",
         "meta"
      ],
      "name" : "MetaKeyAssembly",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyAssembly"
   },
   "MetaKeyCardinality" : {
      "datacheck_type" : "critical",
      "description" : "A subset of meta keys must only have a single value",
      "groups" : [
         "core",
         "meta"
      ],
      "name" : "MetaKeyCardinality",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyCardinality"
   },
   "MetaKeyConditional" : {
      "datacheck_type" : "critical",
      "description" : "Conditional meta keys exist if the data requires them",
      "groups" : [
         "core",
         "meta",
         "variation"
      ],
      "name" : "MetaKeyConditional",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyConditional"
   },
   "MetaKeyConsistent" : {
      "datacheck_type" : "critical",
      "description" : "Assembly and species meta keys are identical between core and core-like databases",
      "groups" : [
         "corelike",
         "meta"
      ],
      "name" : "MetaKeyConsistent",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyConsistent"
   },
   "MetaKeyFormat" : {
      "datacheck_type" : "critical",
      "description" : "Meta values are correctly formatted and linked",
      "groups" : [
         "core",
         "meta",
         "variation"
      ],
      "name" : "MetaKeyFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyFormat"
   },
   "MetaKeyLevel" : {
      "datacheck_type" : "critical",
      "description" : "Meta keys are correctly assigned at species or database level",
      "groups" : [
         "core",
         "corelike",
         "funcgen",
         "meta",
         "variation"
      ],
      "name" : "MetaKeyLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyLevel"
   },
   "MetaKeyOptional" : {
      "datacheck_type" : "advisory",
      "description" : "Optional, but expected, meta keys exist",
      "groups" : [
         "core",
         "meta"
      ],
      "name" : "MetaKeyOptional",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyOptional"
   },
   "MySQLStorageEngine" : {
      "datacheck_type" : "critical",
      "description" : "Database schema matches expected MySQL storage engine",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "MySQLStorageEngine",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MySQLStorageEngine"
   },
   "PepstatsAttributes" : {
      "datacheck_type" : "critical",
      "description" : "All translations have peptide statistics",
      "groups" : [
         "core_statistics",
         "statistics"
      ],
      "name" : "PepstatsAttributes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PepstatsAttributes"
   },
   "PhenotypeDescription" : {
      "datacheck_type" : "advisory",
      "description" : "Imported descriptions contain only supported characters",
      "groups" : [
         "variation_import"
      ],
      "name" : "PhenotypeDescription",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeDescription"
   },
   "PhenotypeDescriptionMissing" : {
      "datacheck_type" : "critical",
      "description" : "Phenotype does not have empty descriptions",
      "groups" : [
         "variation_import"
      ],
      "name" : "PhenotypeDescriptionMissing",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeDescriptionMissing"
   },
   "PhenotypeFeatureAttrib" : {
      "datacheck_type" : "advisory",
      "description" : "Imported phenotype_feature_attrib value is meaningful and well-formed",
      "groups" : [
         "variation_import"
      ],
      "name" : "PhenotypeFeatureAttrib",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeFeatureAttrib"
   },
   "PolyploidAttribs" : {
      "datacheck_type" : "critical",
      "description" : "Component genomes are annotated for polyploid genomes",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "PolyploidAttribs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PolyploidAttribs"
   },
   "Population" : {
      "datacheck_type" : "critical",
      "description" : "Population data is consistent",
      "groups" : [
         "variation_import"
      ],
      "name" : "Population",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Population"
   },
   "ProbeUnique" : {
      "datacheck_type" : "critical",
      "description" : "Probe IDs and mappings are unique",
      "groups" : [
         "funcgen",
         "probe_mapping"
      ],
      "name" : "ProbeUnique",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProbeUnique"
   },
   "ProteinCodingGenes" : {
      "datacheck_type" : "critical",
      "description" : "At least one protein-coding gene exists",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "ProteinCodingGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinCodingGenes"
   },
   "ProteinFeatures" : {
      "datacheck_type" : "critical",
      "description" : "Protein features are present and correct",
      "groups" : [
         "protein_features"
      ],
      "name" : "ProteinFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinFeatures"
   },
   "ProteinTranslation" : {
      "datacheck_type" : "critical",
      "description" : "All protein-coding genes have a valid translation",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "ProteinTranslation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinTranslation"
   },
   "Publication" : {
      "datacheck_type" : "critical",
      "description" : "There are no duplicated publication entries",
      "groups" : [
         "variation_import"
      ],
      "name" : "Publication",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Publication"
   },
   "PublicationDisplay" : {
      "datacheck_type" : "critical",
      "description" : "Publication cited variants display",
      "groups" : [
         "variation_import"
      ],
      "name" : "PublicationDisplay",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PublicationDisplay"
   },
   "ReadFileNames" : {
      "datacheck_type" : "critical",
      "description" : "Checks that read file names are valid.",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "ReadFileNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ReadFileNames"
   },
   "RegulatoryFeatureIsActive" : {
      "datacheck_type" : "critical",
      "description" : "All regulatory features have a valid activity value in at least one epigenome",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "RegulatoryFeatureIsActive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RegulatoryFeatureIsActive"
   },
   "RegulatoryFeatureStableID" : {
      "datacheck_type" : "critical",
      "description" : "Regulatory feature stable IDs are unique within a regulatory build",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "RegulatoryFeatureStableID",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RegulatoryFeatureStableID"
   },
   "RepeatFeatures" : {
      "datacheck_type" : "critical",
      "description" : "Repeat feature coordinates are present and correct",
      "groups" : [
         "annotation",
         "core"
      ],
      "name" : "RepeatFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RepeatFeatures"
   },
   "SNPCounts" : {
      "datacheck_type" : "critical",
      "description" : "SNP counts are correct",
      "groups" : [
         "statistics",
         "variation_statistics"
      ],
      "name" : "SNPCounts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SNPCounts"
   },
   "SampleRegulatoryFeatureExists" : {
      "datacheck_type" : "critical",
      "description" : "Current regulatory build has a sample regulatory feature",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "SampleRegulatoryFeatureExists",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SampleRegulatoryFeatureExists"
   },
   "SchemaPatchesApplied" : {
      "datacheck_type" : "critical",
      "description" : "Schema patches are up-to-date",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "SchemaPatchesApplied",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaPatchesApplied"
   },
   "SchemaType" : {
      "datacheck_type" : "critical",
      "description" : "The schema type meta key matches the DB name",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "SchemaType",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaType"
   },
   "SchemaVersion" : {
      "datacheck_type" : "critical",
      "description" : "The schema version meta key matches the DB name",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "SchemaVersion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaVersion"
   },
   "SeqRegionNames" : {
      "datacheck_type" : "critical",
      "description" : "Seq_region names are unique (top-level) or consistent (non-top-level)",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SeqRegionNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNames"
   },
   "SeqRegionNamesINSDC" : {
      "datacheck_type" : "advisory",
      "description" : "Seq_region names from INSDC are appropriately formatted and attributed",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SeqRegionNamesINSDC",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNamesINSDC"
   },
   "SeqRegionRank" : {
      "datacheck_type" : "critical",
      "description" : "Chromosomes have rank 1",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SeqRegionRank",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionRank"
   },
   "SeqRegionTopLevel" : {
      "datacheck_type" : "critical",
      "description" : "Top-level seq_regions are appropriately configured",
      "groups" : [
         "assembly",
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "SeqRegionTopLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionTopLevel"
   },
   "SequenceLevel" : {
      "datacheck_type" : "critical",
      "description" : "DNA is attached, and only attached, to sequence-level seq_regions",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SequenceLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SequenceLevel"
   },
   "SignalControlMismatches" : {
      "datacheck_type" : "critical",
      "description" : "Checks that signals are not matched to the wrong controls.",
      "groups" : [
         "funcgen",
         "regulatory_build",
         "funcgen_registration"
      ],
      "name" : "SignalControlMismatches",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SignalControlMismatches"
   },
   "Source" : {
      "datacheck_type" : "critical",
      "description" : "Source table has consistent URLs and no duplicated names",
      "groups" : [
         "variation_import"
      ],
      "name" : "Source",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Source"
   },
   "SourceAdvisory" : {
      "datacheck_type" : "advisory",
      "description" : "Source table contains descriptions and the same dbSNP version",
      "groups" : [
         "variation_import"
      ],
      "name" : "SourceAdvisory",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SourceAdvisory"
   },
   "SpeciesNameUnique" : {
      "datacheck_type" : "critical",
      "description" : "Species production_name and alias are unique across all databases in the registry",
      "groups" : [
         "core",
         "meta"
      ],
      "name" : "SpeciesNameUnique",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesNameUnique"
   },
   "SpeciesTaxonomy" : {
      "datacheck_type" : "critical",
      "description" : "Taxonomic meta keys are consistent with taxonomy database",
      "groups" : [
         "core",
         "meta"
      ],
      "name" : "SpeciesTaxonomy",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesTaxonomy"
   },
   "StableIDUnique" : {
      "datacheck_type" : "critical",
      "description" : "Stable IDs are unique, both within a database, and across all databases in the registry",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "StableIDUnique",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::StableIDUnique"
   },
   "TranscriptBounds" : {
      "datacheck_type" : "critical",
      "description" : "Gene and transcript bounds are consistent",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "TranscriptBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::TranscriptBounds"
   },
   "TranscriptVariation" : {
      "datacheck_type" : "critical",
      "description" : "TranscriptVariation data is present and correct",
      "groups" : [
         "variation_effect"
      ],
      "name" : "TranscriptVariation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::TranscriptVariation"
   },
   "UnlocatedTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Transcripts are linked to sequences",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "UnlocatedTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::UnlocatedTranscripts"
   },
   "UnversionedGenes" : {
      "datacheck_type" : "critical",
      "description" : "Genes are unversioned in non-vertebrate databases",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "UnversionedGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::UnversionedGenes"
   },
   "ValidTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Transcripts have translations, if appropriate",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "ValidTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ValidTranscripts"
   },
   "ValidTranslations" : {
      "datacheck_type" : "critical",
      "description" : "Translations have appropriate properties",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "ValidTranslations",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ValidTranslations"
   },
   "Variation" : {
      "datacheck_type" : "critical",
      "description" : "Variation table data is present and correct",
      "groups" : [
         "variation_tables"
      ],
      "name" : "Variation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Variation"
   },
   "VariationClasses" : {
      "datacheck_type" : "advisory",
      "description" : "Variation number of classes is correct",
      "groups" : [
         "variation_import"
      ],
      "name" : "VariationClasses",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationClasses"
   },
   "VariationSet" : {
      "datacheck_type" : "critical",
      "description" : "Variation set is not missing name/description and contains valid id",
      "groups" : [
         "variation_import"
      ],
      "name" : "VariationSet",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationSet"
   },
   "VariationSetStructure" : {
      "datacheck_type" : "critical",
      "description" : "Variation set only has one super set attached to it",
      "groups" : [
         "variation_import"
      ],
      "name" : "VariationSetStructure",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationSetStructure"
   },
   "VariationFeature" : {
      "datacheck_type" : "critical",
      "description" : "VariationFeature table data is present and correct",
      "groups" : [
         "variation_tables"
      ],
      "name" : "VariationFeature",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationFeature"
   },
   "VariationFeatureAlleles" : {
      "datacheck_type" : "critical",
      "description" : "VariationFeature has alleles",
      "groups" : [
         "variation_tables"
      ],
      "name" : "VariationFeatureAlleles",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationFeatureAlleles"
   },
   "VariationFeaturePAR" : {
      "datacheck_type" : "advisory",
      "description" : "Variants do not map to Y PAR",
      "groups" : [
         "variation_tables"
      ],
      "name" : "VariationFeaturePAR",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::VariationFeaturePAR"
   },
   "XrefTypes" : {
      "datacheck_type" : "advisory",
      "description" : "Xrefs are only attached to one feature type.",
      "groups" : [
         "xref"
      ],
      "name" : "XrefTypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::XrefTypes"
   }
}
