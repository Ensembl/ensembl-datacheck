{
   "Archive" : {
      "datacheck_type" : "critical",
      "description" : "Gene archive table is up to date.",
      "groups" : [
         "core_handover",
         "post_projection",
         "stable_id_mapping"
      ],
      "name" : "Archive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Archive"
   },
   "ArraysHaveProbes" : {
      "datacheck_type" : "critical",
      "description" : "All arrays are associated with probes.",
      "groups" : [
         "funcgen_release",
         "probe_mapping"
      ],
      "name" : "ArraysHaveProbes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ArraysHaveProbes"
   },
   "AssemblyAccession" : {
      "datacheck_type" : "critical",
      "description" : "Meta key \"assembly.accession\" is set.",
      "groups" : [
         "assembly",
         "core_handover"
      ],
      "name" : "AssemblyAccession",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyAccession"
   },
   "AssemblyConsistent" : {
      "datacheck_type" : "critical",
      "description" : "Assembly is the same in core and core-like databases",
      "groups" : [
         "assembly",
         "corelike_handover"
      ],
      "name" : "AssemblyConsistent",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyConsistent"
   },
   "AssemblyExceptions" : {
      "datacheck_type" : "critical",
      "description" : "Check if assembly_exceptions are present and correct.",
      "groups" : [
         "assembly",
         "handover"
      ],
      "name" : "AssemblyExceptions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyExceptions"
   },
   "AssemblyMapping" : {
      "datacheck_type" : "critical",
      "description" : "Check validity of assembly mappings.",
      "groups" : [
         "assembly",
         "handover"
      ],
      "name" : "AssemblyMapping",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyMapping"
   },
   "CheckRepeatsDust" : {
      "datacheck_type" : "advisory",
      "groups" : [],
      "name" : "CheckRepeatsDust",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CheckRepeatsDust",
      "description" : "dust repeats exist"
   },
   "AssemblySeqregion" : {
      "datacheck_type" : "critical",
      "description" : "assembly and seq_region table are consistent.",
      "groups" : [
         "assembly",
         "core_handover"
      ],
      "name" : "AssemblySeqregion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblySeqregion"
   },
   "AttribValues" : {
      "datacheck_type" : "advisory",
      "description" : "TSL, APPRIS, GENCODE and RefSeq attributes exist",
      "groups" : [
         "core_handover"
      ],
      "name" : "AttribValues",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AttribValues"
   },
   "ChromosomesAnnotated" : {
      "datacheck_type" : "critical",
      "description" : "Check whether chromosomal seq_regions have appropriate attribute.",
      "groups" : [
         "assembly"
      ],
      "name" : "ChromosomesAnnotated",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ChromosomesAnnotated"
   },
   "CompareBiotype" : {
      "datacheck_type" : "critical",
      "description" : "Check for more than 25% difference between the number of genes in two databases, broken down by biotype.",
      "groups" : [
         "handover"
      ],
      "name" : "CompareBiotype",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareBiotype"
   },
   "CompareSchema" : {
      "datacheck_type" : "critical",
      "description" : "Compare database schema to definition in SQL file",
      "groups" : [
         "core_handover",
         "funcgen_handover",
         "variation_handover"
      ],
      "name" : "CompareSchema",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareSchema"
   },
   "ControlledAnalysis" : {
      "datacheck_type" : "critical",
      "description" : "Check that analysis descriptions and display settings are correct",
      "groups" : [
         "core_handover"
      ],
      "name" : "ControlledAnalysis",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledAnalysis"
   },
   "ControlledMetaKeys" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that database has mandatory and permitted meta keys",
      "groups" : [
         "core_handover",
         "funcgen_handover",
         "variation_handover"
      ],
      "name" : "ControlledMetaKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledMetaKeys"
   },
   "ControlledTablesCore" : {
      "datacheck_type" : "critical",
      "description" : "Check that controlled tables are consistent with production database",
      "groups" : [
         "production_db"
      ],
      "name" : "ControlledTablesCore",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesCore"
   },
   "ControlledTablesVariation" : {
      "datacheck_type" : "critical",
      "description" : "Check that controlled tables are consistent with production database",
      "groups" : [
         "production_db",
         "variation_handover"
      ],
      "name" : "ControlledTablesVariation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesVariation"
   },
   "CoordSystemConsistent" : {
      "datacheck_type" : "critical",
      "description" : "Coord system is the same in core and core-like databases",
      "groups" : [
         "assembly",
         "corelike_handover"
      ],
      "name" : "CoordSystemConsistent",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CoordSystemConsistent"
   },
   "CurrentRegulatoryBuildHasEpigenomes" : {
      "datacheck_type" : "critical",
      "description" : "Check if the current regulatory build has epigenomes data",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "CurrentRegulatoryBuildHasEpigenomes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CurrentRegulatoryBuildHasEpigenomes"
   },
   "DNAEmpty" : {
      "datacheck_type" : "critical",
      "description" : "Check that core-like databases do not contain DNA sequences",
      "groups" : [
         "corelike_handover"
      ],
      "name" : "DNAEmpty",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DNAEmpty"
   },
   "Denormalized" : {
      "datacheck_type" : "critical",
      "description" : "Check that denormalized columns are synchronised",
      "groups" : [
         "variation_handover"
      ],
      "name" : "Denormalized",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Denormalized"
   },
   "DisplayableGenes" : {
      "datacheck_type" : "advisory",
      "description" : "Check that genes are displayable and have web_data attached to their analysis.",
      "groups" : [
         "core_handover"
      ],
      "name" : "DisplayableGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DisplayableGenes"
   },
   "EpigenomeHasSegmentationFile" : {
      "datacheck_type" : "critical",
      "description" : "Check that every epigenome which is part of the current Regulatory Build has a segmentation file in the segmentation_file table",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "EpigenomeHasSegmentationFile",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::EpigenomeHasSegmentationFile"
   },
   "ExonRank" : {
      "datacheck_type" : "critical",
      "description" : "Check for entries in the exon_transcript table that are duplicates apart from the rank",
      "groups" : [
         "core_handover"
      ],
      "name" : "ExonRank",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExonRank"
   },
   "ExperimentHasFeatureSet" : {
      "datacheck_type" : "critical",
      "description" : "Check that every distinct experiment, epigenome and feature_type combination is linked to a feature_set",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "ExperimentHasFeatureSet",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExperimentHasFeatureSet"
   },
   "FeatureBounds" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that features are within the bounds of their seq_region",
      "groups" : [
         "core_handover"
      ],
      "name" : "FeatureBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeatureBounds"
   },
   "FeaturePosition" : {
      "datacheck_type" : "critical",
      "description" : "Checks if features lie within bounds of seq_region i.e. start >=0 and end <= seq_region length.",
      "groups" : [
         "funcgen_handover"
      ],
      "name" : "FeaturePosition",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeaturePosition"
   },
   "ForeignKeys" : {
      "datacheck_type" : "critical",
      "description" : "Check for incorrect foreign key relationships",
      "groups" : [
         "core_handover",
         "funcgen_handover",
         "variation_handover"
      ],
      "name" : "ForeignKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeys"
   },
   "ForeignKeysMultiDB" : {
      "datacheck_type" : "critical",
      "description" : "Check for broken foreign key relationships between tables from multiple databases",
      "groups" : [
         "funcgen_handover",
         "variation_handover"
      ],
      "name" : "ForeignKeysMultiDB",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeysMultiDB"
   },
   "GeneBiotypes" : {
      "datacheck_type" : "critical",
      "description" : "Check that genes and transcripts have valid biotypes",
      "groups" : [
         "gene"
      ],
      "name" : "GeneBiotypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBiotypes"
   },
   "GeneBounds" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that genes are within the bounds of their seq_region",
      "groups" : [
         "core_handover"
      ],
      "name" : "GeneBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBounds"
   },
   "GeneCounts" : {
      "datacheck_type" : "critical",
      "description" : "Check that gene counts are correct",
      "groups" : [
         "genes"
      ],
      "name" : "GeneCounts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneCounts"
   },
   "GeneGC" : {
      "datacheck_type" : "critical",
      "description" : "Check that every gene has a GC statistic",
      "groups" : [
         "genes"
      ],
      "name" : "GeneGC",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneGC"
   },
   "GeneTranscriptBounds" : {
      "datacheck_type" : "critical",
      "description" : "Check that gene and transcript bounds are consistent",
      "groups" : [
         "core_handover"
      ],
      "name" : "GeneTranscriptBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneTranscriptBounds"
   },
   "GenomeStatistics" : {
      "datacheck_type" : "critical",
      "description" : "Check that genome statistics are present and correct",
      "groups" : [
         "genes"
      ],
      "name" : "GenomeStatistics",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GenomeStatistics"
   },
   "Karyotype" : {
      "datacheck_type" : "advisory",
      "description" : "Check whether karyotype data exists.",
      "groups" : [
         "assembly"
      ],
      "name" : "Karyotype",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Karyotype"
   },
   "LRG" : {
      "datacheck_type" : "critical",
      "description" : "Check that LRG features and seq_regions are correctly associated.",
      "groups" : [
         "handover"
      ],
      "name" : "LRG",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::LRG"
   },
   "MetaCoord" : {
      "datacheck_type" : "critical",
      "description" : "Check that the meta_coord table is correctly populated",
      "groups" : [
         "core_handover",
         "funcgen_handover",
         "variation_handover"
      ],
      "name" : "MetaCoord",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaCoord"
   },
   "MetaKeyCardinality" : {
      "datacheck_type" : "critical",
      "description" : "Check cardinality of meta data that must be single-valued",
      "groups" : [
         "core_handover"
      ],
      "name" : "MetaKeyCardinality",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyCardinality"
   },
   "MetaKeyLevel" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that meta_keys are correctly assigned at species or database level",
      "groups" : [
         "core_handover"
      ],
      "name" : "MetaKeyLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyLevel"
   },
   "MySQLStorageEngine" : {
      "datacheck_type" : "critical",
      "description" : "Check if database schema does not match the given MySQL storage engine",
      "groups" : [],
      "name" : "MySQLStorageEngine",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MySQLStorageEngine"
   },
   "PepstatsAttributes" : {
      "datacheck_type" : "critical",
      "description" : "Check that every translation has pepstats statistics",
      "groups" : [
         "genes"
      ],
      "name" : "PepstatsAttributes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PepstatsAttributes"
   },
   "PhenotypeDescription" : {
      "datacheck_type" : "critical",
      "description" : "Check that imported description contains only supported characters",
      "groups" : [],
      "name" : "PhenotypeDescription",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeDescription"
   },
   "ProteinTranslation" : {
      "datacheck_type" : "critical",
      "description" : "Check that every protein-coding gene has a valid translation",
      "groups" : [
         "core"
      ],
      "name" : "ProteinTranslation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinTranslation"
   },
   "RegulatoryFeatureIsActive" : {
      "datacheck_type" : "critical",
      "description" : "Check that every regulatory feature has a valid activity value in at least one epigenome.",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "RegulatoryFeatureIsActive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RegulatoryFeatureIsActive"
   },
   "RegulatoryFeatureStableID" : {
      "datacheck_type" : "critical",
      "description" : "Check that stable IDs are unique within a regulatory build",
      "groups" : [
         "funcgen_handover"
      ],
      "name" : "RegulatoryFeatureStableID",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RegulatoryFeatureStableID"
   },
   "RepeatFeatureCoords" : {
      "datacheck_type" : "critical",
      "description" : "Check that repeat feature coordinates are sensible",
      "groups" : [
         "core_handover"
      ],
      "name" : "RepeatFeatureCoords",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RepeatFeatureCoords"
   },
   "SampleRegulatoryFeatureExists" : {
      "datacheck_type" : "critical",
      "description" : "Check if the current regulatory build has a sample regulatory feature",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "SampleRegulatoryFeatureExists",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SampleRegulatoryFeatureExists"
   },
   "SchemaPatchesApplied" : {
      "datacheck_type" : "critical",
      "description" : "Check that schema patches are up-to-date",
      "groups" : [
         "core_handover",
         "funcgen_handover",
         "variation_handover"
      ],
      "name" : "SchemaPatchesApplied",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaPatchesApplied"
   },
   "SchemaType" : {
      "datacheck_type" : "critical",
      "description" : "Check that the schema type meta key matches the DB name",
      "groups" : [
         "core_handover",
         "funcgen_handover",
         "variation_handover"
      ],
      "name" : "SchemaType",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaType"
   },
   "SchemaVersion" : {
      "datacheck_type" : "critical",
      "description" : "Check that the schema version meta_key matches the DB name",
      "groups" : [
         "core_handover",
         "funcgen_handover",
         "variation_handover"
      ],
      "name" : "SchemaVersion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaVersion"
   },
   "SegmentationFileHasBigBed" : {
      "datacheck_type" : "critical",
      "description" : "Check that every segmentation_file entry which has been used in the current Regulatory Build is linked to a BIGBED entry in the data_file table and exists on disk",
      "groups" : [
         "funcgen_integrity",
         "funcgen_Post_regulatory_build"
      ],
      "name" : "SegmentationFileHasBigBed",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SegmentationFileHasBigBed"
   },
   "SeqRegionNames" : {
      "datacheck_type" : "critical",
      "description" : "Check that seq_region names are unique (top-level) or consistent (non-top-level)",
      "groups" : [
         "core_handover"
      ],
      "name" : "SeqRegionNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNames"
   },
   "SeqRegionNamesINSDC" : {
      "datacheck_type" : "advisory",
      "description" : "Check that seq_region names from INSDC are appropriately formatted and attributed",
      "groups" : [
         "assembly"
      ],
      "name" : "SeqRegionNamesINSDC",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNamesINSDC"
   },
   "SeqRegionRank" : {
      "datacheck_type" : "critical",
      "description" : "Check that chromosomes have rank 1",
      "groups" : [
         "core_handover"
      ],
      "name" : "SeqRegionRank",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionRank"
   },
   "SeqRegionTopLevel" : {
      "datacheck_type" : "critical",
      "description" : "Check that top-level seq_regions are appropriately configured",
      "groups" : [
         "core_handover"
      ],
      "name" : "SeqRegionTopLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionTopLevel"
   },
   "SequenceLevel" : {
      "datacheck_type" : "critical",
      "description" : "Check that DNA is attached and only attached to sequence-level seq_regions.",
      "groups" : [
         "handover"
      ],
      "name" : "SequenceLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SequenceLevel"
   },
   "SpeciesMeta" : {
      "datacheck_type" : "critical",
      "description" : "Check the presence and format of species-related meta keys",
      "groups" : [
         "core_handover"
      ],
      "name" : "SpeciesMeta",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesMeta"
   },
   "SpeciesNameUnique" : {
      "datacheck_type" : "critical",
      "description" : "Check that production_name and alias are unique across all species",
      "groups" : [
         "meta"
      ],
      "name" : "SpeciesNameUnique",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesNameUnique"
   },
   "UnlocatedTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Check that transcripts are linked to sequences",
      "groups" : [
         "core_handover"
      ],
      "name" : "UnlocatedTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::UnlocatedTranscripts"
   },
   "ValidTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Check that transcripts have translations, if appropriate",
      "groups" : [
         "core_handover"
      ],
      "name" : "ValidTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ValidTranscripts"
   },
   "ValidTranslations" : {
      "datacheck_type" : "critical",
      "description" : "Check that translations have appropriate properties",
      "groups" : [
         "core_handover"
      ],
      "name" : "ValidTranslations",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ValidTranslations"
   },
   "XrefTypes" : {
      "datacheck_type" : "advisory",
      "description" : "Check that xrefs are only attached to one feature type.",
      "groups" : [
         "handover"
      ],
      "name" : "XrefTypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::XrefTypes"
   }
}
