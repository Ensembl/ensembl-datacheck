{
   "AlignFeatureExternalDB" : {
      "datacheck_type" : "advisory",
      "description" : "Check that all align_feature rows have an external_db",
      "groups" : [
         "core",
         "corelike"
      ],
      "name" : "AlignFeatureExternalDB",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AlignFeatureExternalDB"
   },
   "AltAllele" : {
      "datacheck_type" : "critical",
      "description" : "Ensure alt_allele group members all map back to the same chromosome",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "AltAllele",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AltAllele"
   },
   "AltAlleleGroup" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that no alt_allele_group has more than one gene from the primary assembly",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "AltAlleleGroup",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AltAlleleGroup"
   },
   "AnalysisFormat" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that analysis is formatted correctly",
      "groups" : [
         "core",
         "corelike"
      ],
      "name" : "AnalysisFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AnalysisFormat"
   },
   "Archive" : {
      "datacheck_type" : "critical",
      "description" : "Gene archive table is up to date.",
      "groups" : [
         "id_mapping"
      ],
      "name" : "Archive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Archive"
   },
   "ArraysHaveProbes" : {
      "datacheck_type" : "critical",
      "description" : "All arrays are associated with probes.",
      "groups" : [
         "funcgen",
         "probe_mapping"
      ],
      "name" : "ArraysHaveProbes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ArraysHaveProbes"
   },
   "AssemblyExceptions" : {
      "datacheck_type" : "critical",
      "description" : "Check if assembly_exceptions are present and correct.",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "AssemblyExceptions",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblyExceptions"
   },
   "AssemblySeqregion" : {
      "datacheck_type" : "critical",
      "description" : "assembly and seq_region table are consistent.",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "AssemblySeqregion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AssemblySeqregion"
   },
   "AttribValues" : {
      "datacheck_type" : "advisory",
      "description" : "TSL, APPRIS, GENCODE and RefSeq attributes exist",
      "groups" : [
         "annotation"
      ],
      "name" : "AttribValues",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::AttribValues"
   },
   "CanonicalTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Check that canonical transcripts are set",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "CanonicalTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CanonicalTranscripts"
   },
   "ChromosomesAnnotated" : {
      "datacheck_type" : "critical",
      "description" : "Check whether chromosomal seq_regions have appropriate attribute.",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "ChromosomesAnnotated",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ChromosomesAnnotated"
   },
   "CompareBiotype" : {
      "datacheck_type" : "advisory",
      "description" : "Check for more than 25% difference between the number of genes in two databases, broken down by biotype.",
      "groups" : [
         "core_compare"
      ],
      "name" : "CompareBiotype",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareBiotype"
   },
   "CompareSchema" : {
      "datacheck_type" : "critical",
      "description" : "Compare database schema to definition in SQL file",
      "groups" : [
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "CompareSchema",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CompareSchema"
   },
   "ControlledAnalysis" : {
      "datacheck_type" : "critical",
      "description" : "Check that analysis descriptions and display settings are correct",
      "groups" : [
         "core",
         "corelike",
         "production_db"
      ],
      "name" : "ControlledAnalysis",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledAnalysis"
   },
   "ControlledMetaKeys" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that database has mandatory and permitted meta keys",
      "groups" : [
         "core",
         "corelike",
         "funcgen",
         "production_db",
         "variation"
      ],
      "name" : "ControlledMetaKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledMetaKeys"
   },
   "ControlledTablesCore" : {
      "datacheck_type" : "critical",
      "description" : "Check that controlled tables are consistent with production database",
      "groups" : [
         "core",
         "corelike",
         "production_db"
      ],
      "name" : "ControlledTablesCore",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesCore"
   },
   "ControlledTablesVariation" : {
      "datacheck_type" : "critical",
      "description" : "Check that controlled tables are consistent with production database",
      "groups" : [
         "production_db",
         "variation"
      ],
      "name" : "ControlledTablesVariation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ControlledTablesVariation"
   },
   "CoreTables" : {
      "datacheck_type" : "critical",
      "description" : "Check that appropriate core-like tables are identical to those in the core database",
      "groups" : [
         "corelike"
      ],
      "name" : "CoreTables",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CoreTables"
   },
   "CurrentRegulatoryBuildHasEpigenomes" : {
      "datacheck_type" : "critical",
      "description" : "Check if the current regulatory build has epigenomes data",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "CurrentRegulatoryBuildHasEpigenomes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::CurrentRegulatoryBuildHasEpigenomes"
   },
   "DNAEmpty" : {
      "datacheck_type" : "critical",
      "description" : "Check that core-like databases do not contain DNA sequences",
      "groups" : [
         "corelike"
      ],
      "name" : "DNAEmpty",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DNAEmpty"
   },
   "Denormalized" : {
      "datacheck_type" : "critical",
      "description" : "Check that denormalized columns are synchronised",
      "groups" : [
         "variation",
         "schema"
      ],
      "name" : "Denormalized",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Denormalized"
   },
   "DisplayableGenes" : {
      "datacheck_type" : "advisory",
      "description" : "Check that genes are displayable and have web_data attached to their analysis",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "DisplayableGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::DisplayableGenes"
   },
   "EpigenomeHasSegmentationFile" : {
      "datacheck_type" : "critical",
      "description" : "Check that every epigenome which is part of the current Regulatory Build has a segmentation file in the segmentation_file table",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "EpigenomeHasSegmentationFile",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::EpigenomeHasSegmentationFile"
   },
   "ExonBounds" : {
      "datacheck_type" : "critical",
      "description" : "Check that exon regions are non-overlapping, and are consistent with their transcripts",
      "groups" : [
         "core_handover"
      ],
      "name" : "ExonBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExonBounds"
   },
   "ExonRank" : {
      "datacheck_type" : "critical",
      "description" : "Check for exon_transcript duplicates and missing rank=1 exons",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "ExonRank",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExonRank"
   },
   "ExperimentHasFeatureSet" : {
      "datacheck_type" : "critical",
      "description" : "Check that every distinct experiment, epigenome and feature_type combination is linked to a feature_set",
      "groups" : [
         "funcgen",
         "ersa"
      ],
      "name" : "ExperimentHasFeatureSet",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ExperimentHasFeatureSet"
   },
   "FeatureBounds" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that features are within the bounds of their seq_region",
      "groups" : [
         "annotation",
         "core",
         "corelike"
      ],
      "name" : "FeatureBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeatureBounds"
   },
   "FeaturePosition" : {
      "datacheck_type" : "critical",
      "description" : "Checks if features lie within bounds of seq_region i.e. start >=0 and end <= seq_region length.",
      "groups" : [
         "funcgen_handover"
      ],
      "name" : "FeaturePosition",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::FeaturePosition"
   },
   "ForeignKeys" : {
      "datacheck_type" : "critical",
      "description" : "Check for incorrect foreign key relationships",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "ForeignKeys",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeys"
   },
   "ForeignKeysMultiDB" : {
      "datacheck_type" : "critical",
      "description" : "Check for broken foreign key relationships between tables from multiple databases",
      "groups" : [
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "ForeignKeysMultiDB",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ForeignKeysMultiDB"
   },
   "GeneBiotypes" : {
      "datacheck_type" : "critical",
      "description" : "Check that genes and transcripts have valid biotypes",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "GeneBiotypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBiotypes"
   },
   "GeneBounds" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that genes are within the bounds of their seq_region",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "GeneBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneBounds"
   },
   "GeneCounts" : {
      "datacheck_type" : "critical",
      "description" : "Check that gene counts are correct",
      "groups" : [
         "statistics"
      ],
      "name" : "GeneCounts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneCounts"
   },
   "GeneGC" : {
      "datacheck_type" : "critical",
      "description" : "Check that every gene has a GC statistic",
      "groups" : [
         "statistics"
      ],
      "name" : "GeneGC",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneGC"
   },
   "GeneStableID" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that genes have unique stable IDs",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "GeneStableID",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneStableID"
   },
   "GeneStrands" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that genes have valid strand values",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "GeneStrands",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GeneStrands"
   },
   "GenomeStatistics" : {
      "datacheck_type" : "critical",
      "description" : "Check that genome statistics are present and correct",
      "groups" : [
         "statistics"
      ],
      "name" : "GenomeStatistics",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::GenomeStatistics"
   },
   "InterProFeatures" : {
      "datacheck_type" : "critical",
      "description" : "Check that InterPro data are present and correct",
      "groups" : [
         "protein_features"
      ],
      "name" : "InterProFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::InterProFeatures"
   },
   "Karyotype" : {
      "datacheck_type" : "advisory",
      "description" : "Check whether karyotype data exists.",
      "groups" : [
         "assembly"
      ],
      "name" : "Karyotype",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::Karyotype"
   },
   "LRG" : {
      "datacheck_type" : "critical",
      "description" : "Check that LRG features and seq_regions are correctly associated.",
      "groups" : [
         "handover"
      ],
      "name" : "LRG",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::LRG"
   },
   "MTCodonTable" : {
      "datacheck_type" : "critical",
      "description" : "MT seq region has codon table attribute",
      "groups" : [
         "core"
      ],
      "name" : "MTCodonTable",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MTCodonTable"
   },
   "MetaCoord" : {
      "datacheck_type" : "critical",
      "description" : "Check that the meta_coord table is correctly populated",
      "groups" : [
         "annotation",
         "core",
         "corelike",
         "funcgen",
         "geneset",
         "protein_features",
         "variation"
      ],
      "name" : "MetaCoord",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaCoord"
   },
   "MetaKeyAssembly" : {
      "datacheck_type" : "critical",
      "description" : "Check for consistency between assembly data and meta keys",
      "groups" : [
         "assembly",
         "core",
         "meta"
      ],
      "name" : "MetaKeyAssembly",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyAssembly"
   },
   "MetaKeyCardinality" : {
      "datacheck_type" : "critical",
      "description" : "Check cardinality of meta data that must be single-valued",
      "groups" : [
         "core",
         "meta"
      ],
      "name" : "MetaKeyCardinality",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyCardinality"
   },
   "MetaKeyConditional" : {
      "datacheck_type" : "critical",
      "description" : "Check for meta keys which are conditional on some aspect of the data",
      "groups" : [
         "core",
         "meta",
         "variation"
      ],
      "name" : "MetaKeyConditional",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyConditional"
   },
   "MetaKeyConsistent" : {
      "datacheck_type" : "critical",
      "description" : "Check that meta_keys are identical between core and core-like databases",
      "groups" : [
         "corelike",
         "meta"
      ],
      "name" : "MetaKeyConsistent",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyConsistent"
   },
   "MetaKeyFormat" : {
      "datacheck_type" : "critical",
      "description" : "Check the format and links for meta values",
      "groups" : [
         "core",
         "meta",
         "variation"
      ],
      "name" : "MetaKeyFormat",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyFormat"
   },
   "MetaKeyLevel" : {
      "datacheck_type" : "critical",
      "description" : "Ensure that meta_keys are correctly assigned at species or database level",
      "groups" : [
         "core",
         "corelike",
         "funcgen",
         "meta",
         "variation"
      ],
      "name" : "MetaKeyLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyLevel"
   },
   "MetaKeyOptional" : {
      "datacheck_type" : "advisory",
      "description" : "Check for meta keys which are expected but not mandatory",
      "groups" : [
         "core",
         "meta"
      ],
      "name" : "MetaKeyOptional",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MetaKeyOptional"
   },
   "MySQLStorageEngine" : {
      "datacheck_type" : "critical",
      "description" : "Check if database schema does not match the given MySQL storage engine",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "MySQLStorageEngine",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::MySQLStorageEngine"
   },
   "PepstatsAttributes" : {
      "datacheck_type" : "critical",
      "description" : "Check that every translation has pepstats statistics",
      "groups" : [
         "statistics"
      ],
      "name" : "PepstatsAttributes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PepstatsAttributes"
   },
   "PhenotypeDescription" : {
      "datacheck_type" : "critical",
      "description" : "Check that imported description contains only supported characters",
      "groups" : [],
      "name" : "PhenotypeDescription",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PhenotypeDescription"
   },
   "PolyploidAttribs" : {
      "datacheck_type" : "critical",
      "description" : "Check that component genomes are annotated for polyploid genomes",
      "groups" : [
         "core"
      ],
      "name" : "PolyploidAttribs",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::PolyploidAttribs"
   },
   "ProteinCodingGenes" : {
      "datacheck_type" : "critical",
      "description" : "Check for at least one protein-coding gene",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "ProteinCodingGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinCodingGenes"
   },
   "ProteinFeatures" : {
      "datacheck_type" : "critical",
      "description" : "Check that protein features are present and correct",
      "groups" : [
         "protein_features"
      ],
      "name" : "ProteinFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinFeatures"
   },
   "ProteinTranslation" : {
      "datacheck_type" : "critical",
      "description" : "Check that every protein-coding gene has a valid translation",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "ProteinTranslation",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ProteinTranslation"
   },
   "RegulatoryFeatureIsActive" : {
      "datacheck_type" : "critical",
      "description" : "Check that every regulatory feature has a valid activity value in at least one epigenome.",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "RegulatoryFeatureIsActive",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RegulatoryFeatureIsActive"
   },
   "RegulatoryFeatureStableID" : {
      "datacheck_type" : "critical",
      "description" : "Check that stable IDs are unique within a regulatory build",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "RegulatoryFeatureStableID",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RegulatoryFeatureStableID"
   },
   "RepeatFeatures" : {
      "datacheck_type" : "critical",
      "description" : "Check that repeat feature coordinates are present and correct",
      "groups" : [
         "annotation",
         "core"
      ],
      "name" : "RepeatFeatures",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::RepeatFeatures"
   },
   "SampleRegulatoryFeatureExists" : {
      "datacheck_type" : "critical",
      "description" : "Check if the current regulatory build has a sample regulatory feature",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "SampleRegulatoryFeatureExists",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SampleRegulatoryFeatureExists"
   },
   "SchemaPatchesApplied" : {
      "datacheck_type" : "critical",
      "description" : "Check that schema patches are up-to-date",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "SchemaPatchesApplied",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaPatchesApplied"
   },
   "SchemaType" : {
      "datacheck_type" : "critical",
      "description" : "Check that the schema type meta key matches the DB name",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "SchemaType",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaType"
   },
   "SchemaVersion" : {
      "datacheck_type" : "critical",
      "description" : "Check that the schema version meta_key matches the DB name",
      "groups" : [
         "compara",
         "core",
         "corelike",
         "funcgen",
         "schema",
         "variation"
      ],
      "name" : "SchemaVersion",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SchemaVersion"
   },
   "SegmentationFileHasBigBed" : {
      "datacheck_type" : "critical",
      "description" : "Check that every segmentation_file entry which has been used in the current Regulatory Build is linked to a BIGBED entry in the data_file table and exists on disk",
      "groups" : [
         "funcgen",
         "regulatory_build"
      ],
      "name" : "SegmentationFileHasBigBed",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SegmentationFileHasBigBed"
   },
   "SeqRegionNames" : {
      "datacheck_type" : "critical",
      "description" : "Check that seq_region names are unique (top-level) or consistent (non-top-level)",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SeqRegionNames",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNames"
   },
   "SeqRegionNamesINSDC" : {
      "datacheck_type" : "advisory",
      "description" : "Check that seq_region names from INSDC are appropriately formatted and attributed",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SeqRegionNamesINSDC",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionNamesINSDC"
   },
   "SeqRegionRank" : {
      "datacheck_type" : "critical",
      "description" : "Check that chromosomes have rank 1",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SeqRegionRank",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionRank"
   },
   "SeqRegionTopLevel" : {
      "datacheck_type" : "critical",
      "description" : "Check that top-level seq_regions are appropriately configured",
      "groups" : [
         "assembly",
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "SeqRegionTopLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SeqRegionTopLevel"
   },
   "SequenceLevel" : {
      "datacheck_type" : "critical",
      "description" : "Check that DNA is attached and only attached to sequence-level seq_regions.",
      "groups" : [
         "assembly",
         "core"
      ],
      "name" : "SequenceLevel",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SequenceLevel"
   },
   "SpeciesNameUnique" : {
      "datacheck_type" : "critical",
      "description" : "Check that production_name and alias are unique across all species",
      "groups" : [
         "core",
         "meta"
      ],
      "name" : "SpeciesNameUnique",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesNameUnique"
   },
   "SpeciesTaxonomy" : {
      "datacheck_type" : "critical",
      "description" : "Check that taxonomy meta key is consistent with taxonomy database",
      "groups" : [
         "core"
      ],
      "name" : "SpeciesTaxonomy",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::SpeciesTaxonomy"
   },
   "TranscriptBounds" : {
      "datacheck_type" : "critical",
      "description" : "Check that gene and transcript bounds are consistent",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "TranscriptBounds",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::TranscriptBounds"
   },
   "UnlocatedTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Check that transcripts are linked to sequences",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "UnlocatedTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::UnlocatedTranscripts"
   },
   "UnversionedGenes" : {
      "datacheck_type" : "critical",
      "description" : "Check that genes are unversioned in non-vertebrate databases",
      "groups" : [
         "core",
         "geneset"
      ],
      "name" : "UnversionedGenes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::UnversionedGenes"
   },
   "ValidTranscripts" : {
      "datacheck_type" : "critical",
      "description" : "Check that transcripts have translations, if appropriate",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "ValidTranscripts",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ValidTranscripts"
   },
   "ValidTranslations" : {
      "datacheck_type" : "critical",
      "description" : "Check that translations have appropriate properties",
      "groups" : [
         "core",
         "corelike",
         "geneset"
      ],
      "name" : "ValidTranslations",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::ValidTranslations"
   },
   "XrefTypes" : {
      "datacheck_type" : "advisory",
      "description" : "Check that xrefs are only attached to one feature type.",
      "groups" : [
         "xref"
      ],
      "name" : "XrefTypes",
      "package_name" : "Bio::EnsEMBL::DataCheck::Checks::XrefTypes"
   }
}
